"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4002],{1277:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-1d2eb0b6",path:"/web-developer/back-end/practice/case1-blogs.html",title:"案例-开发Web Server博客",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"流程图",slug:"流程图",children:[]},{level:2,title:"目标",slug:"目标",children:[]},{level:2,title:"需求",slug:"需求",children:[]},{level:2,title:"技术方案",slug:"技术方案",children:[]},{level:2,title:"存储用户数据",slug:"存储用户数据",children:[]},{level:2,title:"接口设计",slug:"接口设计",children:[{level:3,title:"开发接口",slug:"开发接口",children:[]},{level:3,title:"处理路由",slug:"处理路由",children:[]}]},{level:2,title:"登录",slug:"登录",children:[{level:3,title:"Cookie",slug:"cookie",children:[]},{level:3,title:"Redis",slug:"redis",children:[]},{level:3,title:"Nodejs链接Redis",slug:"nodejs链接redis",children:[]},{level:3,title:"开发登录功能，和前端联调",slug:"开发登录功能-和前端联调",children:[]}]},{level:2,title:"Nginx",slug:"nginx",children:[]},{level:2,title:"处理http请求",slug:"处理http请求",children:[{level:3,title:"处理GET请求",slug:"处理get请求",children:[]},{level:3,title:"处理POST请求",slug:"处理post请求",children:[]},{level:3,title:"搭建开发环境",slug:"搭建开发环境",children:[]}]},{level:2,title:"连接数据库",slug:"连接数据库",children:[{level:3,title:"操作数据库",slug:"操作数据库",children:[]},{level:3,title:"区分环境配置",slug:"区分环境配置",children:[]}]},{level:2,title:"PM2",slug:"pm2",children:[{level:3,title:"常用命令",slug:"常用命令",children:[]},{level:3,title:"配置文件",slug:"配置文件",children:[]}]},{level:2,title:"日志",slug:"日志",children:[{level:3,title:"nodejs文件操作",slug:"nodejs文件操作",children:[]}]},{level:2,title:"安全",slug:"安全",children:[]},{level:2,title:"express 框架",slug:"express-框架",children:[{level:3,title:"中间件",slug:"中间件",children:[]}]},{level:2,title:"Koa2 框架",slug:"koa2-框架",children:[{level:3,title:"async/await 要点",slug:"async-await-要点",children:[]},{level:3,title:"洋葱圈模型",slug:"洋葱圈模型",children:[]}]}],filePathRelative:"web-developer/back-end/practice/case1-blogs.md",git:{updatedTime:1683600236e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},8760:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var t=a(6252);const e=(0,t.Wm)("h1",{id:"案例-开发web-server博客",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#案例-开发web-server博客","aria-hidden":"true"},"#"),(0,t.Uk)(" 案例-开发Web Server博客")],-1),p={href:"https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E7%BC%96%E7%A8%8B%2F%E6%85%95%E8%AF%BE%E7%BD%91%E5%89%8D%E7%AB%AF%2FL134%20-%20Node.js%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91Web%20Server%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%20%E5%89%8D%E7%AB%AF%E6%99%8B%E5%8D%87%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%EF%BC%88%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89%20-%20288%E5%85%83",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("L134 - Node.js从零开发Web Server博客项目 前端晋升全栈工程师必备"),c=(0,t.uE)('<h2 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h2><p><img src="http://www.casssb.com/assets/images/knowledge/computers/node/flow-chart.png" alt="image"></p><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h2><p>开发一个博客系统，具有博客的基本功能。</p><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h2><p>需求指导开发。</p><h2 id="技术方案" tabindex="-1"><a class="header-anchor" href="#技术方案" aria-hidden="true">#</a> 技术方案</h2><ul><li>数据如何存储。</li><li>如何与前端对接，接口设计。</li></ul><h2 id="存储用户数据" tabindex="-1"><a class="header-anchor" href="#存储用户数据" aria-hidden="true">#</a> 存储用户数据</h2><h2 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计" aria-hidden="true">#</a> 接口设计</h2><h3 id="开发接口" tabindex="-1"><a class="header-anchor" href="#开发接口" aria-hidden="true">#</a> 开发接口</h3><ul><li><p>暂时不连接数据库，先模拟数据，写出接口</p></li><li><p>初始化路由：根据之前技术方案的设计，做出路由</p></li><li><p>返回假数据：将路由和数据处理分离，以符合设计原则</p></li></ul><h3 id="处理路由" tabindex="-1"><a class="header-anchor" href="#处理路由" aria-hidden="true">#</a> 处理路由</h3><div class="custom-container tip"><p class="custom-container-title">API和路由</p><p><strong>API</strong></p><ul><li>前端和后端，不同端（子系统）对接的一个术语</li><li>有url(路由)，有输入，有输出</li></ul><p><strong>路由</strong></p><ul><li>是API的一部分</li><li>后端系统内部的一个定义</li></ul></div><h2 id="登录" tabindex="-1"><a class="header-anchor" href="#登录" aria-hidden="true">#</a> 登录</h2><ul><li>登录校验&amp;登录信息存储</li><li>Cookie和Session</li><li>Session写入Redis</li><li>开发登录功能，和前端联调</li></ul><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h3><ul><li><p>客户端操作Cookie</p></li><li><p>Server端操作Cookie: Set-Cookie</p></li><li><p>Server端查看Cookie: <code>req.headers.cookie</code></p></li><li><p>Server端修改Cookie: <code>res.setHeader(&#39;Set-Cookie&#39;, &#39;key=val; path=/; httpOnly&#39;)</code></p></li><li><p>限制客户端修改Cookie: <code>httpOnly</code></p></li></ul><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><ul><li>web server中常用的缓存数据库，数据存放在内存中</li><li>相比mysql，访问速度快</li><li>成本更高，可存储的数据量更小</li><li>解决多进程内存不共享问题，所有进程都访问一个redis服务</li></ul><p>适合存放<code>session</code>，因为访问频繁，对性能要求极高。可以不考虑断点丢失数据的问题，登录信息丢失之后可以再去登录。数据量不会太大。</p><h3 id="nodejs链接redis" tabindex="-1"><a class="header-anchor" href="#nodejs链接redis" aria-hidden="true">#</a> Nodejs链接Redis</h3><ul><li><p>安装<code>redis</code></p></li><li><p>使用</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> redisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">,</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">)</span>\nredisClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 测试</span>\nredisClient<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;licong&#39;</span><span class="token punctuation">,</span> redis<span class="token punctuation">.</span>print<span class="token punctuation">)</span>\nredisClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n\t<span class="token comment">// 退出</span>\n\tredisClient<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="开发登录功能-和前端联调" tabindex="-1"><a class="header-anchor" href="#开发登录功能-和前端联调" aria-hidden="true">#</a> 开发登录功能，和前端联调</h3><blockquote><p>用到nginx反向代理</p></blockquote><ul><li>登录功能依赖cookie，必须用浏览器来联调</li><li>cookie跨域不共享，前端和server端必须同域</li><li>需要用到nignx做代理</li></ul><h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h2>',28),l=(0,t.Uk)("Nginx"),i=(0,t.uE)('<p><strong>修改配置：</strong></p><p>配置文件路径: <code>nginx-1.20.1 &gt; conf &gt; nginx.conf</code></p><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>server {\n\tlisten       8080;\n\tserver_name  localhost;\n\n\tlocation / {\n\t\tproxy_pass \thttp://localhost:8084;\n\t}\n\n\tlocation /api/ {\n\t\tproxy_pass \thttp://localhost:8000;\n\t\tproxy_set_header \tHost \t$host;\n\t}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="处理http请求" tabindex="-1"><a class="header-anchor" href="#处理http请求" aria-hidden="true">#</a> 处理http请求</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tres<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="处理get请求" tabindex="-1"><a class="header-anchor" href="#处理get请求" aria-hidden="true">#</a> 处理<code>GET</code>请求</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>\n\treq<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tres<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="处理post请求" tabindex="-1"><a class="header-anchor" href="#处理post请求" aria-hidden="true">#</a> 处理<code>POST</code>请求</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 设置返回格式</span>\n\t\tres<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\t\treq<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\tpostData <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\treq<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\tres<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="搭建开发环境" tabindex="-1"><a class="header-anchor" href="#搭建开发环境" aria-hidden="true">#</a> 搭建开发环境</h3><ul><li>使用<code>nodemon</code>监测文件变化，自动重启node</li><li>使用<code>cross-env</code>设置环境变量，兼容mac、linux、windows</li></ul><h2 id="连接数据库" tabindex="-1"><a class="header-anchor" href="#连接数据库" aria-hidden="true">#</a> 连接数据库</h2><p>安装<code>mysql</code>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>yarn add mysql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>账户: root</li><li>密码: 123456</li></ul><h3 id="操作数据库" tabindex="-1"><a class="header-anchor" href="#操作数据库" aria-hidden="true">#</a> 操作数据库</h3><ol><li>建库</li><li>建表</li><li>表操作</li></ol><p><strong>users表：</strong></p><table><thead><tr><th>column</th><th>datatype</th><th>PK</th><th>NN</th><th>UQ</th><th>B</th><th>UN</th><th>ZF</th><th>AI</th><th>Default</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>Y</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>username</td><td>varchar(20)</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>password</td><td>varchar(20)</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>realname</td><td>varchar(10)</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>blogs表：</strong></p><table><thead><tr><th>column</th><th>datatype</th><th>PK</th><th>NN</th><th>UQ</th><th>B</th><th>UN</th><th>ZF</th><th>AI</th><th>Default</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>Y</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>title</td><td>varchar(50)</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>content</td><td>longtext</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>createtime</td><td>bigint(20)</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>author</td><td>varchar(20)</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="区分环境配置" tabindex="-1"><a class="header-anchor" href="#区分环境配置" aria-hidden="true">#</a> 区分环境配置</h3><p>process.env.NODE_ENV</p><ul><li>NODE_ENV=dev</li><li>NODE_ENV=production</li></ul><h2 id="pm2" tabindex="-1"><a class="header-anchor" href="#pm2" aria-hidden="true">#</a> PM2</h2>',25),u=(0,t.Uk)("官网："),r={href:"https://pm2.keymetrics.io/docs/usage/quick-start/",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("https://pm2.keymetrics.io/docs/usage/quick-start/"),k=(0,t.uE)('<ul><li>进程守护，系统崩溃自动重启</li><li>启动多进程，充分利用CPU和内存</li><li>自带日志记录功能</li></ul><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><ul><li>运行 <code>pm2 start app.js</code></li><li>查看 <code>pm2 list</code></li><li>重启 <code>pm2 restart [0]</code></li><li>停止 <code>pm2 stop [0]</code></li><li>信息 <code>pm2 info [0]</code></li><li>日志 <code>pm2 log</code></li></ul><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><ul><li>设置进程数量</li><li>修改日志文件地址</li></ul><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h2><ul><li>访问日志</li><li>自定义日志</li><li>nodejs文件操作 nodejs stream</li><li>日志功能开发和使用</li><li>日志文件拆分，日志内容分析</li></ul><h3 id="nodejs文件操作" tabindex="-1"><a class="header-anchor" href="#nodejs文件操作" aria-hidden="true">#</a> nodejs文件操作</h3><p>写入文件:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;\\n这是新写入的内容&#39;</span>\n<span class="token keyword">const</span> opt <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tflag<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span>\t<span class="token comment">// a: 追加写入，w: 覆盖写入</span>\n<span class="token punctuation">}</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> content<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>读取文件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span>\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// data 是二进制类型，需要转为字符串</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="i-o操作的性能瓶颈" tabindex="-1"><a class="header-anchor" href="#i-o操作的性能瓶颈" aria-hidden="true">#</a> I/O操作的性能瓶颈</h4><blockquote><p>I/O是input/output的意思，就是输入输出操作。</p></blockquote><ul><li>I/O包括<code>网络I/O</code>和<code>文件I/O</code></li><li>相比于CPU计算和内存读写，比较慢</li><li>要在有限的硬件资源下，提高I/O的操作效率</li><li>使用stream</li></ul><h4 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> stream</h4><blockquote><p>管道</p></blockquote><p>解决网络和文件的读写效率问题</p><ul><li>拷贝文件</li><li>网络返回</li></ul><h4 id="写日志" tabindex="-1"><a class="header-anchor" href="#写日志" aria-hidden="true">#</a> 写日志</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fullFileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;logs&#39;</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>\n<span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tflags<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nwriteStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>log <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="拆分日志" tabindex="-1"><a class="header-anchor" href="#拆分日志" aria-hidden="true">#</a> 拆分日志</h4><ul><li>按时间拆分</li><li>实现方式：<code>linux</code>的<code>crontab</code>命令，即定时任务</li></ul><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全" aria-hidden="true">#</a> 安全</h2><ul><li>sql注入</li><li>xss攻击</li><li>用户密码加密（md5）</li></ul><h2 id="express-框架" tabindex="-1"><a class="header-anchor" href="#express-框架" aria-hidden="true">#</a> express 框架</h2><ul><li>脚手架工具</li><li>中间件机制</li><li>开发接口，连接数据库，实现登录，日志记录</li><li>中间件原理</li></ul><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h3><p>每一个在<code>app.use</code>中注册的函数都是中间件。</p><ul><li>next()</li></ul><p><code>app.use</code>如果第一个参数是函数，会直接执行。运行<code>next()</code>会执行下一个符合要求的<code>app.use</code>中注册的函数，包括满足条件的父路由里面的函数也会执行；不执行<code>next()</code>下面的就不会执行。</p><p>满足条件：</p><ul><li>请求方式</li><li>路由地址</li></ul><p>路由条件：</p><ul><li><code>app.use(&#39;/api&#39;)</code>，get和post都能匹配</li><li><code>app.get(&#39;/api&#39;)</code>，只匹配get</li><li><code>app.post(&#39;/api&#39;)</code>，只匹配post</li></ul><p><em><strong>中间件原理</strong></em></p><h2 id="koa2-框架" tabindex="-1"><a class="header-anchor" href="#koa2-框架" aria-hidden="true">#</a> Koa2 框架</h2><h3 id="async-await-要点" tabindex="-1"><a class="header-anchor" href="#async-await-要点" aria-hidden="true">#</a> async/await 要点</h3><ol><li><code>await</code>后面可以追加<code>promise</code>对象，获取<code>resolve</code>的值</li><li><code>await</code>必须包裹在<code>async</code>函数中</li><li><code>async</code>函数执行返回的也是一个<code>promise</code>对象</li><li>try-catch可以截获<code>promise</code>中<code>reject</code>的值</li></ol><h3 id="洋葱圈模型" tabindex="-1"><a class="header-anchor" href="#洋葱圈模型" aria-hidden="true">#</a> 洋葱圈模型</h3><p>一个<code>request</code>从进入到<code>response</code>的过程，一层一层进入，再一层一层出来。</p><ul><li>处理过程<code>next()</code>：第一层，开始 -&gt; 第二层，开始 -&gt; 第三层，开始 -&gt; 第三层，结束 -&gt; 第二层，结束 -&gt; 第一层，结束</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// logger</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一层，开始&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> rt <span class="token operator">=</span> ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;X-Response-Time&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一层，结束&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// x-response-time</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二层，开始&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>\n  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;X-Response-Time&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二层，结束&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// response</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二层，开始&#39;</span><span class="token punctuation">)</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二层，结束&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>',43),h={render:function(n,s){const a=(0,t.up)("OutboundLink"),h=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[e,(0,t.Wm)("p",null,[(0,t.Wm)("a",p,[o,(0,t.Wm)(a)])]),c,(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)(h,{to:"/web-developer/back-end/Nginx.html"},{default:(0,t.w5)((()=>[l])),_:1})])]),i,(0,t.Wm)("p",null,[u,(0,t.Wm)("a",r,[d,(0,t.Wm)(a)])]),k],64)}}}}]);