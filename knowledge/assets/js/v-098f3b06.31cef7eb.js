"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[1429],{1646:(t,d,l)=>{l.r(d),l.d(d,{data:()=>i});const i={key:"v-098f3b06",path:"/web-developer/back-end/database/case1-mooc.html",title:"案例-慕课网数据库",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据库结构设计",slug:"数据库结构设计",children:[{level:3,title:"1. 业务分析",slug:"_1-业务分析",children:[]},{level:3,title:"2. 逻辑设计",slug:"_2-逻辑设计",children:[]},{level:3,title:"3.物理设计",slug:"_3-物理设计",children:[]},{level:3,title:"4.选择数据类型",slug:"_4-选择数据类型",children:[]},{level:3,title:"5.对象命名",slug:"_5-对象命名",children:[]}]},{level:2,title:"MySQL 常见的存储引擎",slug:"mysql-常见的存储引擎",children:[{level:3,title:"InnoDB",slug:"innodb",children:[]}]},{level:2,title:"SQL",slug:"sql",children:[{level:3,title:"DCL-访问控制",slug:"dcl-访问控制",children:[]},{level:3,title:"查询",slug:"查询",children:[]},{level:3,title:"建立索引",slug:"建立索引",children:[]}]},{level:2,title:"SQL 高级特性",slug:"sql-高级特性",children:[{level:3,title:"公共表表达式 CTE",slug:"公共表表达式-cte",children:[]},{level:3,title:"窗口函数",slug:"窗口函数",children:[]}]},{level:2,title:"SQL 开发中易犯的错误",slug:"sql-开发中易犯的错误",children:[]},{level:2,title:"SQL 优化",slug:"sql-优化",children:[{level:3,title:"1.发现问题",slug:"_1-发现问题",children:[]},{level:3,title:"2.分析执行计划",slug:"_2-分析执行计划",children:[]},{level:3,title:"3.SQL 优化的手段",slug:"_3-sql-优化的手段",children:[]}]}],filePathRelative:"web-developer/back-end/database/case1-mooc.md",git:{updatedTime:1655889605e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},9214:(t,d,l)=>{l.r(d),l.d(d,{default:()=>e});const i=(0,l(6252).uE)('<h1 id="案例-慕课网数据库" tabindex="-1"><a class="header-anchor" href="#案例-慕课网数据库" aria-hidden="true">#</a> 案例-慕课网数据库</h1><ul><li>[L150 - 零基础入门 全角度解读企业主流数据库 MySQL8.0]</li></ul><h2 id="数据库结构设计" tabindex="-1"><a class="header-anchor" href="#数据库结构设计" aria-hidden="true">#</a> 数据库结构设计</h2><ol><li>业务分析</li><li>逻辑设计</li><li>物理设计</li><li>选择数据类型</li><li>对象命名</li></ol><h3 id="_1-业务分析" tabindex="-1"><a class="header-anchor" href="#_1-业务分析" aria-hidden="true">#</a> 1. 业务分析</h3><p>先把页面中不同的模块视分为不同的对象，再列出每个对象下面的具体属性，再进行逻辑设计</p><p><strong>课程的属性：</strong></p><ul><li>主标题，副标题，方向，分类，难度，最新，最热，时长，简介，人数，需知，收获，讲师昵称，讲师职位，课程图片，综合评分，内容实用，简洁易懂，逻辑清晰</li></ul><p><strong>课程列表的属性：</strong></p><ul><li>章节名，小节名，说明，小节时长，章节 URL，视频格式</li></ul><p><strong>讲师的属性：</strong></p><ul><li>讲师昵称，说明，性别，职位，经验，积分，关注人，粉丝数</li></ul><p><strong>问答评论属性：</strong></p><ul><li>类型，标题，内容，关联章节，浏览量，发布时间，用户昵称</li></ul><p><strong>笔记的属性</strong></p><ul><li>用户昵称，关联章节，笔记标题，笔记内容，发布时间</li></ul><p><strong>用户的属性</strong></p><ul><li>用户昵称，说明，性别，职位，经验，积分，关注人，粉丝数</li></ul><p><strong>评价的属性：</strong></p><ul><li>用户，课程主标题，内容，评分，发布时间</li></ul><h3 id="_2-逻辑设计" tabindex="-1"><a class="header-anchor" href="#_2-逻辑设计" aria-hidden="true">#</a> 2. 逻辑设计</h3><p>根据三大设计范式，将整理出来的对象和属性，加以分析，放到合适的表中。先确定唯一主键，再看其它属性之间的关系。列表每个模块的表之后，再考虑使用反范式化设计去优化表结构。</p><ul><li>数据库设计范式</li><li>反范式化设计</li><li>物理设计</li></ul><h4 id="数据库设计范式" tabindex="-1"><a class="header-anchor" href="#数据库设计范式" aria-hidden="true">#</a> 数据库设计范式</h4><ol><li>第一范式，原子性：表中的所有字段都是不可再分的</li><li>第二范式，业务主键：表中必须存在业务主键，并且非主键全部依赖于业务主键，不能只是部分依赖</li><li>第三范式，冗余性，表中的非主键列之间不能相互依赖</li></ol><h4 id="反范式化设计" tabindex="-1"><a class="header-anchor" href="#反范式化设计" aria-hidden="true">#</a> 反范式化设计</h4><p>以空间换时间。考虑查询某一类数据，需要查询多少表。连表越多，性能越差。为了提供性能可以牺牲一些第三范式。</p><h4 id="宽表模式" tabindex="-1"><a class="header-anchor" href="#宽表模式" aria-hidden="true">#</a> 宽表模式</h4><p>将一个对象的所有属性，都存在一个表中，这个表就是宽表模式</p><p><strong>适合场景：</strong></p><ul><li>配合列存储的数据报表应用</li><li>数据都在一个表中，查询不需要关联多个表</li></ul><p><strong>宽表模式存在的问题：</strong></p><ul><li>数据冗余问题，相同的数据在表中出现多次</li><li>数据插入异常问题，失去主键信息而无法写入表中</li><li>数据更新异常问题，修改一行数据同时修改了多行</li><li>数据删除异常问题</li></ul><h3 id="_3-物理设计" tabindex="-1"><a class="header-anchor" href="#_3-物理设计" aria-hidden="true">#</a> 3.物理设计</h3><p><strong>课程表：imc_course</strong></p><table><thead><tr><th>列名</th><th>数据类型</th><th>命名</th></tr></thead><tbody><tr><td>课程 ID(PK)</td><td>int unsigned</td><td>course_id</td></tr><tr><td>主标题(UK)</td><td>varchar(20)</td><td>title</td></tr><tr><td>副标题</td><td>varchar(50)</td><td>title_desc</td></tr><tr><td>课程方向 ID</td><td>smallint unsigned</td><td>type_id</td></tr><tr><td>课程分类 ID</td><td>smallint unsigned</td><td>class_id</td></tr><tr><td>课程难度 ID</td><td>smallint unsigned</td><td>level_id</td></tr><tr><td>上线时间</td><td>datetime</td><td>online_time</td></tr><tr><td>学习人数</td><td>int unsigned</td><td>study_cnt</td></tr><tr><td>课程时长</td><td>time</td><td>course_time</td></tr><tr><td>课程简介</td><td>varchar(200)</td><td>intro</td></tr><tr><td>课程需知</td><td>varchar(200)</td><td>info</td></tr><tr><td>课程收获</td><td>varchar(200)</td><td>harvest</td></tr><tr><td>讲师 ID</td><td>int unsigned</td><td>user_id</td></tr><tr><td>课程图片</td><td>varchar(200)</td><td>main_pic</td></tr><tr><td>内容评分</td><td>decimal(3,1)</td><td>content_score</td></tr><tr><td>简单易懂</td><td>decimal(3,1)</td><td>level_score</td></tr><tr><td>逻辑清晰</td><td>decimal(3,1)</td><td>logic_score</td></tr><tr><td>综合评分</td><td>decimal(3,1)</td><td>score</td></tr></tbody></table><p><strong>课程章节表：imc_chapter</strong></p><table><thead><tr><th>列名</th><th>数据类型</th><th>命名</th></tr></thead><tbody><tr><td>章节 ID(PK)</td><td>int unsigned</td><td>chapter_id</td></tr><tr><td>课程 ID(UK)</td><td>int unsigned</td><td>course_id</td></tr><tr><td>章节名称(UK)</td><td>varchar(50)</td><td>chapter_name</td></tr><tr><td>章节说明</td><td>varchar(200)</td><td>chapter_info</td></tr><tr><td>章节编号</td><td>tinyint(2) unsigned</td><td>chapter_no</td></tr></tbody></table><p><strong>课程小节表：</strong></p><table><thead><tr><th>列名</th><th>数据类型</th></tr></thead><tbody><tr><td>小节 ID(PK)</td><td>int unsigned</td></tr><tr><td>章节 ID(UK)</td><td>int unsigned</td></tr><tr><td>课程 ID(UK)</td><td>int unsigned</td></tr><tr><td>小节名称(UK)</td><td>varchar(50)</td></tr><tr><td>小节 URL</td><td>varchar(200)</td></tr><tr><td>视频格式</td><td>enum(&#39;avi&#39;,&#39;mp4&#39;,&#39;mpeg&#39;)</td></tr><tr><td>小节时长</td><td>time</td></tr><tr><td>章节编号</td><td>tinyint(2) unsigned</td></tr></tbody></table><p><strong>课程分类表：</strong></p><table><thead><tr><th>列名</th><th>数据类型</th></tr></thead><tbody><tr><td>课程分类 ID(PK)</td><td>smallint unsigned</td></tr><tr><td>分类名称(UK)</td><td>varchar(10)</td></tr></tbody></table><p><strong>用户表：</strong></p><table><thead><tr><th>列名</th><th>数据类型</th></tr></thead><tbody><tr><td>用户 ID(PK)</td><td>int unsigned</td></tr><tr><td>用户昵称(UK)</td><td>varchar(20)</td></tr><tr><td>密码</td><td>char(32)</td></tr><tr><td>性别</td><td>char(2)</td></tr><tr><td>省</td><td>varchar(20)</td></tr><tr><td>市</td><td>varchar(20)</td></tr><tr><td>职位</td><td>varchar(10)</td></tr><tr><td>说明</td><td>varchar(100)</td></tr><tr><td>经验值</td><td>mediumint unsigned</td></tr><tr><td>积分</td><td>int unsigned</td></tr><tr><td>关注人数</td><td>int unsigned</td></tr><tr><td>粉丝人数</td><td>int unsigned</td></tr><tr><td>讲师标识</td><td>tinyint unsigned</td></tr><tr><td>注册时间</td><td>datetime</td></tr><tr><td>用户状态</td><td>tinyint unsigned</td></tr></tbody></table><h3 id="_4-选择数据类型" tabindex="-1"><a class="header-anchor" href="#_4-选择数据类型" aria-hidden="true">#</a> 4.选择数据类型</h3><p>为数据选择合适的数据类型：</p><ul><li><p>优先选择符合存储数据需求的最小数据类型</p></li><li><p>谨慎使用<code>ENUM</code>，<code>TEXT</code>字符串类型</p></li><li><p>同财务相关的数值型数据，必需使用<code>decimal</code>类型</p></li></ul><p>枚举的缺点是修改起来比较麻烦，修改表结构需要锁表，有风险。<code>TEXT</code>类型可以存储 2 万汉字通常情况下使用不了这么多。</p><h3 id="_5-对象命名" tabindex="-1"><a class="header-anchor" href="#_5-对象命名" aria-hidden="true">#</a> 5.对象命名</h3><ul><li>所有数据库对象名称必须使用小写字母，可选用下划线分割</li><li>禁止使用 MySQL 保留关键字</li><li>命名见名识意，最好不要超过 32 个字符</li><li>临时库表必须以<code>tmp</code>为前缀并以日期为后缀</li><li>用于备份的库，表必须以<code>bak</code>为前缀并以日期为后缀</li></ul><h2 id="mysql-常见的存储引擎" tabindex="-1"><a class="header-anchor" href="#mysql-常见的存储引擎" aria-hidden="true">#</a> MySQL 常见的存储引擎</h2><ul><li>InnoDB</li></ul><h3 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb" aria-hidden="true">#</a> InnoDB</h3><p>最常用的事务型存储引擎</p><p>特点：</p><ul><li>事务型存储引擎支持 ACID</li><li>数据按主键聚集存储</li><li>支持行级锁及 MVCC</li><li>支持 Btree 和自适应 Hash 索引</li><li>支持全文和空间索引</li></ul><h2 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h2><h3 id="dcl-访问控制" tabindex="-1"><a class="header-anchor" href="#dcl-访问控制" aria-hidden="true">#</a> DCL-访问控制</h3><ul><li>建立数据库账号: <code>create user</code></li><li>对账号进行授权: <code>grant</code></li><li>收回账号权限: <code>revoke</code></li></ul><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><ol><li>首先确定我们要获取的数据存在哪些表中（确定 FROM 子句）</li><li>其次确定我们要获取表中的哪些列（确定 SELECT 子句）</li><li>确认是否需要对表中的数据进行过滤（确定 WHERE 子句）</li></ol><h4 id="连表查询" tabindex="-1"><a class="header-anchor" href="#连表查询" aria-hidden="true">#</a> 连表查询</h4><ul><li>表与表之间要存在一定的关联关系，也就是存有对方表中的业务主键或数据主键，也叫做外键</li><li>使用<code>JOIN</code>关联多个表</li></ul><h4 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> JOIN</h4><ul><li>INNER JOIN: 内关联</li><li>OUTER JOIN: 外关联 <ul><li>LEFT JOIN: 左</li><li>RIGHT JOIN: 右</li></ul></li></ul><p><strong>INNER JOIN</strong></p><p>内关联只查询同时存在两个表中的数据</p><p><strong>OUTER JOIN</strong></p><p>外关联有左右区分</p><h3 id="建立索引" tabindex="-1"><a class="header-anchor" href="#建立索引" aria-hidden="true">#</a> 建立索引</h3><p>根据具体的业务查询方式来建立索引</p><h2 id="sql-高级特性" tabindex="-1"><a class="header-anchor" href="#sql-高级特性" aria-hidden="true">#</a> SQL 高级特性</h2><h3 id="公共表表达式-cte" tabindex="-1"><a class="header-anchor" href="#公共表表达式-cte" aria-hidden="true">#</a> 公共表表达式 CTE</h3><p>可以代替子查询使用。</p><p>特性：</p><ul><li>MySQL8.0 之后的版本才可以使用</li><li>CTE 生成一个命名临时表，且只在查询期间有效</li><li>CTE 临时表可以多次引用，自引用</li></ul><h3 id="窗口函数" tabindex="-1"><a class="header-anchor" href="#窗口函数" aria-hidden="true">#</a> 窗口函数</h3><h2 id="sql-开发中易犯的错误" tabindex="-1"><a class="header-anchor" href="#sql-开发中易犯的错误" aria-hidden="true">#</a> SQL 开发中易犯的错误</h2><ul><li><p>使用<code>COUNT(*)</code>判断是否存在符合条件的数据。</p><ul><li>应该使用<code>SELECT...LIMIT 1</code></li></ul></li><li><p>在执行一个更新语句后，使用查询方式判断此更新语句是否有执行成功。</p><ul><li>应该使用<code>ROW_COUNT()</code>函数判断修改行数</li></ul></li><li><p>试图在<code>ON</code>条件中过滤不满足条件的记录。</p><ul><li>应该在<code>WHERE</code>语句中过滤</li></ul></li></ul><h2 id="sql-优化" tabindex="-1"><a class="header-anchor" href="#sql-优化" aria-hidden="true">#</a> SQL 优化</h2><ol><li>发现问题</li><li>分析执行计划</li><li>SQL 优化的手段</li></ol><h3 id="_1-发现问题" tabindex="-1"><a class="header-anchor" href="#_1-发现问题" aria-hidden="true">#</a> 1.发现问题</h3><ul><li>用户或测试人员主动上报应用性能问题</li><li>分析慢查询日志发现存在问题的 SQL <ul><li>配置 MySQL 慢查询日志</li><li>分析 MySQL 慢查询日志工具</li></ul></li><li>数据库实时监控长时间运行的 SQL</li></ul><h3 id="_2-分析执行计划" tabindex="-1"><a class="header-anchor" href="#_2-分析执行计划" aria-hidden="true">#</a> 2.分析执行计划</h3><ul><li>了解 SQL 如何访问表中的数据</li><li>了解 SQL 如何使用表中的索引</li><li>了解 SQL 所使用的查询类型</li><li>EXPLAIN</li></ul><h3 id="_3-sql-优化的手段" tabindex="-1"><a class="header-anchor" href="#_3-sql-优化的手段" aria-hidden="true">#</a> 3.SQL 优化的手段</h3><p>两种手段：</p><ul><li>优化 SQL 查询所涉及到的表中的索引</li><li>改写 SQL 以更好的利用索引的目的</li></ul><h4 id="优化索引" tabindex="-1"><a class="header-anchor" href="#优化索引" aria-hidden="true">#</a> 优化索引</h4><p>索引作用是告诉存储引擎如何快速查找所需数据，建立一个索引就像给一本书建立了一个目录</p><p>Btree 索引， B+树的结构存储索引数据</p><p>应该在什么列上建立索引？</p><ul><li>WHERE 子句中的列</li><li>在 ORDER BY、GROUP BY、DISTINCT 中的字段</li><li>多表 JOIN 的关联列</li><li>选择复合索引建的顺序，将区分度最高，最频繁，长度小的列放在最左侧</li></ul><p><strong>索引使用误区：</strong></p><ul><li>误区：索引越多越好 <ul><li>不是越多越好</li></ul></li><li>误区：使用 IN 列表查询不能用到索引 <ul><li>其实 IN 列表也能用到索引</li></ul></li><li>误区：查询过滤顺序必须同索引键顺序相同 <ul><li>其实不必，MySQL 优化器会自动优化顺序</li></ul></li></ul><p><strong>改写 SQL：</strong></p><ul><li>使用 outer join 代替 not in</li><li>使用 CTE 代替子查询</li><li>拆分复杂的大 SQL 为多个简单的小 SQL</li><li>巧妙利用计算列优化查询</li></ul>',97),e={render:function(t,d){return i}}}}]);