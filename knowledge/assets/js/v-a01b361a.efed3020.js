"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4900],{2086:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-a01b361a",path:"/web-developer/front-end/javascript/",title:"JS",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"文档",slug:"文档",children:[]},{level:2,title:"基础",slug:"基础",children:[]},{level:2,title:"堆栈内存",slug:"堆栈内存",children:[]},{level:2,title:"闭包作用域",slug:"闭包作用域",children:[]},{level:2,title:"原型",slug:"原型",children:[]},{level:2,title:"编译机制",slug:"编译机制",children:[]},{level:2,title:"ES6/ES7",slug:"es6-es7",children:[]},{level:2,title:"面向对象",slug:"面向对象",children:[{level:3,title:"强制将函数转换为构建函数",slug:"强制将函数转换为构建函数",children:[]}]}],filePathRelative:"web-developer/front-end/javascript/README.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:4},{name:"黎聪",email:"licong23@xdf.cn",commits:2}]}}},7362:(a,n,e)=>{e.r(n),e.d(n,{default:()=>u});var s=e(6252);const t=(0,s.Wm)("h1",{id:"js",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#js","aria-hidden":"true"},"#"),(0,s.Uk)(" JS")],-1),l={href:"https://roadmap.sh/javascript",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("学习路线"),r=(0,s.Wm)("h2",{id:"文档",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#文档","aria-hidden":"true"},"#"),(0,s.Uk)(" 文档")],-1),c={href:"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript",target:"_blank",rel:"noopener noreferrer"},i=(0,s.Uk)("JavaScript-MDN-mozilla "),o=(0,s.uE)('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/frontend-developer/javascrip-知识点.png" alt="image"></p><h2 id="堆栈内存" tabindex="-1"><a class="header-anchor" href="#堆栈内存" aria-hidden="true">#</a> 堆栈内存</h2><p>堆：16 进制内存地址</p><p>对象的属性名不重复，属性名都是字符串。obj[&#39;0&#39;] == obj[0]。</p><h2 id="闭包作用域" tabindex="-1"><a class="header-anchor" href="#闭包作用域" aria-hidden="true">#</a> 闭包作用域</h2><p>作用域、作用域链、执行上下文、堆内存、垃圾回收机制</p><p>GO: 全局对象 AO: 函数变量对象</p><p>变量提升 事件循环机制</p><p>面向对象</p><p>DOM、BOM</p><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/frontend-developer/javascrip-原型.png" alt="image"></p><h2 id="编译机制" tabindex="-1"><a class="header-anchor" href="#编译机制" aria-hidden="true">#</a> 编译机制</h2><p>toString/toValue</p><h2 id="es6-es7" tabindex="-1"><a class="header-anchor" href="#es6-es7" aria-hidden="true">#</a> ES6/ES7</h2><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><h3 id="强制将函数转换为构建函数" tabindex="-1"><a class="header-anchor" href="#强制将函数转换为构建函数" aria-hidden="true">#</a> 强制将函数转换为构建函数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Interface</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> completer<span class="token punctuation">,</span> terminal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Interface</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> completer<span class="token punctuation">,</span> terminal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',19),u={render:function(a,n){const e=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[t,(0,s.Wm)("ul",null,[(0,s.Wm)("li",null,[(0,s.Wm)("a",l,[p,(0,s.Wm)(e)])])]),r,(0,s.Wm)("ul",null,[(0,s.Wm)("li",null,[(0,s.Wm)("a",c,[i,(0,s.Wm)(e)])])]),o],64)}}}}]);