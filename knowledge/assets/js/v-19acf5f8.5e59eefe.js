"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[6191],{3459:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-19acf5f8",path:"/web-developer/front-end/javascript/error.html",title:"常见错误处理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"异步错误和 try/catch",slug:"异步错误和-try-catch",children:[{level:3,title:"try catch 无法捕获异步函数中的错误",slug:"try-catch-无法捕获异步函数中的错误",children:[]},{level:3,title:"用 Promise 捕获异步错误",slug:"用-promise-捕获异步错误",children:[]},{level:3,title:"async/await",slug:"async-await",children:[]}]},{level:2,title:"throw Error",slug:"throw-error",children:[]},{level:2,title:"堆栈跟踪",slug:"堆栈跟踪",children:[]},{level:2,title:"自定义错误类",slug:"自定义错误类",children:[]},{level:2,title:"使用工具来监控并上报错误",slug:"使用工具来监控并上报错误",children:[]},{level:2,title:"参考阅读",slug:"参考阅读",children:[]}],filePathRelative:"web-developer/front-end/javascript/error.md",git:{updatedTime:1677050963e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},3999:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(6252);const t=(0,p.uE)('<h1 id="常见错误处理" tabindex="-1"><a class="header-anchor" href="#常见错误处理" aria-hidden="true">#</a> 常见错误处理</h1><ol><li><p>RangeError：范围错误，代码中使用了超出范围的数值</p></li><li><p>ReferenceError：引用错误，引用的变量/函数不存在</p></li><li><p>SyntaxError：语法解析错误</p></li><li><p>TypeError：类型错误，例如对非对象类型使用对象方法、对非函数类型使用函数调用操作符等</p></li><li><p>URIError：URI 错误，<code>decodeURI(&#39;%&#39;)</code>代码中使用了不合法的 URI</p></li><li><p>EvalError：<code>eval()</code></p></li><li><p>InternalError：调用栈溢出</p></li></ol><h2 id="异步错误和-try-catch" tabindex="-1"><a class="header-anchor" href="#异步错误和-try-catch" aria-hidden="true">#</a> 异步错误和 try/catch</h2><p>Error 对象只有在被抛出时才会成为异常。</p><p>try/catch 可以捕获同步函数中的错误。</p><h3 id="try-catch-无法捕获异步函数中的错误" tabindex="-1"><a class="header-anchor" href="#try-catch-无法捕获异步函数中的错误" aria-hidden="true">#</a> try catch 无法捕获异步函数中的错误</h3><p>实例代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 异步任务</span>\n<span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;async error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 主任务</span>\n<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&#39;err&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这种情况下 main 是无法 catch error，原因是异步代码并不在 try catch 上下文中执行。异步任务由 eventloop 加入任务队列，并取出入栈(js 主进程)执行，而当 task 取出执行的时候， main 的栈已经退出了，也就是上下文环境已经改变，所以 main 无法捕获 task 的错误。</p><h3 id="用-promise-捕获异步错误" tabindex="-1"><a class="header-anchor" href="#用-promise-捕获异步错误" aria-hidden="true">#</a> 用 Promise 捕获异步错误</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reslove<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;async error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意 promise 内部的错误不会冒泡出来，需要通过 promise.catch 才可以捕获，或者使用</p><h3 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h3><p>将异步函数变成同步函数执行，那就可以使用 try/catch 捕获</p><h2 id="throw-error" tabindex="-1"><a class="header-anchor" href="#throw-error" aria-hidden="true">#</a> throw Error</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Whoops!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="堆栈跟踪" tabindex="-1"><a class="header-anchor" href="#堆栈跟踪" aria-hidden="true">#</a> 堆栈跟踪</h2><ol><li><p>using try and catch</p></li><li><p>using stack</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;custom error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>using console.trace</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;My Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="自定义错误类" tabindex="-1"><a class="header-anchor" href="#自定义错误类" aria-hidden="true">#</a> 自定义错误类</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ValidationError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// this.name = &#39;ValidationError&#39;; // 等同于 get name</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;ValidationError&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">throw</span> <span class="token function">ValidationError</span><span class="token punctuation">(</span><span class="token string">&#39;未找到该属性: name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以使用 instanceof 关键字识别它：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token function">ValidationError</span><span class="token punctuation">(</span><span class="token string">&#39;未找到该属性: name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出 ValidationError 的代码</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ValidationError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用工具来监控并上报错误" tabindex="-1"><a class="header-anchor" href="#使用工具来监控并上报错误" aria-hidden="true">#</a> 使用工具来监控并上报错误</h2><ol><li><p>Sentry（https://sentry.io/）： 专注于异常（应用崩溃）而不是信息错误。它提供了应用中错误的完整概述，包括受影响的用户数量、调用堆栈、受影响的浏览器以及导致错误的提交等详细信息。</p></li><li><p>Rollbar（https://rollbar.com/）：用于前端、后端和移动应用的无代理错误监控工具。</p></li></ol><h2 id="参考阅读" tabindex="-1"><a class="header-anchor" href="#参考阅读" aria-hidden="true">#</a> 参考阅读</h2>',28),e={href:"https://www.teqng.com/2022/11/15/javascript%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/#5_tong_bu_cuo_wu_chu_li",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("JavaScript 错误处理完整指南"),o={href:"https://juejin.cn/post/7004606483870515213",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("捕获所有异步 error"),r={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",e,[c,(0,p.Wm)(a)])])]),(0,p.Wm)("li",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",o,[l,(0,p.Wm)(a)])])])])],64)}}}}]);