"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[3234],{3634:(e,a,n)=>{n.r(a),n.d(a,{data:()=>l});const l={key:"v-05a16478",path:"/web-developer/front-end/engineering/cli.html",title:"脚手架工具",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"我的脚手架",slug:"我的脚手架",children:[{level:3,title:"我的常用模板",slug:"我的常用模板",children:[]}]},{level:2,title:"架构",slug:"架构",children:[]},{level:2,title:"脚手架的执行原理",slug:"脚手架的执行原理",children:[]},{level:2,title:"脚手架框架",slug:"脚手架框架",children:[{level:3,title:"Yargs",slug:"yargs",children:[]},{level:3,title:"commander",slug:"commander",children:[]}]},{level:2,title:"命令执行流程",slug:"命令执行流程",children:[]},{level:2,title:"架构设计",slug:"架构设计",children:[{level:3,title:"执行流程图",slug:"执行流程图",children:[]},{level:3,title:"架构背后的思考",slug:"架构背后的思考",children:[]},{level:3,title:"准备阶段",slug:"准备阶段",children:[]}]},{level:2,title:"本地开发调试",slug:"本地开发调试",children:[{level:3,title:"将本地命令添加到 Node 环境变量中",slug:"将本地命令添加到-node-环境变量中",children:[]}]},{level:2,title:"代码",slug:"代码",children:[{level:3,title:"本地开发",slug:"本地开发",children:[]},{level:3,title:"使用 lerna 在模块中安装包",slug:"使用-lerna-在模块中安装包",children:[]}]},{level:2,title:"可能出现的问题",slug:"可能出现的问题",children:[]}],filePathRelative:"web-developer/front-end/engineering/cli.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:4}]}}},6464:(e,a,n)=>{n.r(a),n.d(a,{default:()=>o});var l=n(6252);const i=(0,l.uE)('<h1 id="脚手架工具" tabindex="-1"><a class="header-anchor" href="#脚手架工具" aria-hidden="true">#</a> 脚手架工具</h1><h2 id="我的脚手架" tabindex="-1"><a class="header-anchor" href="#我的脚手架" aria-hidden="true">#</a> 我的脚手架</h2><p>将模板发布到 npm 私库，同步备份 github 私库。</p><p>开发管理后台，维护模板，新增和修改。</p><p>开发 serve 端提供 API。</p><h3 id="我的常用模板" tabindex="-1"><a class="header-anchor" href="#我的常用模板" aria-hidden="true">#</a> 我的常用模板</h3><ul><li>管理后台 - 内部综合平台</li><li>管理后台 - 奥印平台</li><li>H5 - vue3</li><li>H5 - react</li></ul><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><h4 id="痛点分析" tabindex="-1"><a class="header-anchor" href="#痛点分析" aria-hidden="true">#</a> 痛点分析：</h4><ul><li>创建项目/组件时，存在大量重复代码拷贝:快速复用已有沉淀</li><li>协同开发时，由于 git 操作不规范，导致分支混乱，操作耗时:制定标准的 git 操作规范并集成到脚手架</li><li>发布上线耗时，而且容易出现各种错误:定制标准流程混合规范并集成到脚手架</li></ul><h4 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析：</h4><ul><li>通用的研发脚手架</li><li>通用的项目/组件创建能力 <ul><li>模板支持制定，制定后能够发布生效</li><li>模板支持快速接入，极低的接入成本</li></ul></li><li>通用的项目/组件发布能力 <ul><li>发布过程自动完成标准的 git 操作</li><li>发布成功后自动删除开发分支并创建 tag</li><li>发布后自动完成云构建、CDN、域名绑定</li><li>发布过程支持测试/正式两种模式</li></ul></li></ul><h2 id="脚手架的执行原理" tabindex="-1"><a class="header-anchor" href="#脚手架的执行原理" aria-hidden="true">#</a> 脚手架的执行原理</h2><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/脚手架的执行原理.png" alt="image"></p><h2 id="脚手架框架" tabindex="-1"><a class="header-anchor" href="#脚手架框架" aria-hidden="true">#</a> 脚手架框架</h2><p>脚手架框架：Yargs、commander</p><h3 id="yargs" tabindex="-1"><a class="header-anchor" href="#yargs" aria-hidden="true">#</a> Yargs</h3><h3 id="commander" tabindex="-1"><a class="header-anchor" href="#commander" aria-hidden="true">#</a> commander</h3><h2 id="命令执行流程" tabindex="-1"><a class="header-anchor" href="#命令执行流程" aria-hidden="true">#</a> 命令执行流程</h2><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/脚手架流程.jpg" alt="image"></p><h4 id="启动阶段" tabindex="-1"><a class="header-anchor" href="#启动阶段" aria-hidden="true">#</a> 启动阶段</h4><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/corezhunbeijieduan.png" alt="image"></p><h4 id="动态加载-initcommand" tabindex="-1"><a class="header-anchor" href="#动态加载-initcommand" aria-hidden="true">#</a> 动态加载 initCommand</h4><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/动态加载initCommand.jpg" alt="image"></p><h2 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计" aria-hidden="true">#</a> 架构设计</h2><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/jiaoshoujiajiagoutu.png" alt="image"></p><h3 id="执行流程图" tabindex="-1"><a class="header-anchor" href="#执行流程图" aria-hidden="true">#</a> 执行流程图</h3><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/脚手架工具/架构设计-准备阶段.jpg" alt="image"></p><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/脚手架工具/架构设计-下载模板.jpg" alt="image"></p><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/脚手架工具/架构设计-模板安装.jpg" alt="image"></p><h3 id="架构背后的思考" tabindex="-1"><a class="header-anchor" href="#架构背后的思考" aria-hidden="true">#</a> 架构背后的思考</h3><ol><li>可扩展：能够快速复用到不同团队，适应不同团队之间的差异</li><li>低沉本：在不改动脚手架源码的情况下，能够低成本的新增模板</li><li>高性能：控制存储空间，安装充分利用 Node 多进程提升安装性能</li></ol><h3 id="准备阶段" tabindex="-1"><a class="header-anchor" href="#准备阶段" aria-hidden="true">#</a> 准备阶段</h3><p>主要处理参数解析，检查安装环境，采集项目基本信息</p><h2 id="本地开发调试" tabindex="-1"><a class="header-anchor" href="#本地开发调试" aria-hidden="true">#</a> 本地开发调试</h2><p>在 Node 的 bin 目录下配置环境变量执行本地命令，将环境变量链接到实际文件<code>bin/index.js</code>。</p><h3 id="将本地命令添加到-node-环境变量中" tabindex="-1"><a class="header-anchor" href="#将本地命令添加到-node-环境变量中" aria-hidden="true">#</a> 将本地命令添加到 Node 环境变量中</h3><ol><li>先找到 Node 文件目录</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">which</span> node\n<span class="token comment"># /Users/cass/.nvm/versions/node/v16.16.0/bin/node</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>进入 bin 文件夹</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /Users/cass/.nvm/versions/node/v16.16.0/bin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>使用<code>ls -la</code>可以查看到所有命令具体执行的文件</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> -la\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',43),s={start:"4"},r=(0,l.Uk)("使用 "),d=(0,l.Uk)("npm link"),t=(0,l.Uk)(" 创建本地脚手架"),c=(0,l.Wm)("li",null,[(0,l.Wm)("p",null,[(0,l.Uk)("注意: 执行"),(0,l.Wm)("code",null,"npm link"),(0,l.Uk)("的包 package.json 里面要有"),(0,l.Wm)("code",null,"bin")])],-1),h=(0,l.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;lc-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/index.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><h3 id="本地开发" tabindex="-1"><a class="header-anchor" href="#本地开发" aria-hidden="true">#</a> 本地开发</h3><p>每一个命令都是一个包，未发布上线之前，添加<code>--targetPath</code>，测试脚手架运行，使用本地<code>init</code>包：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>imooc-cli-dev init test-project --targetPath /Users/cass/Desktop/code/learning/web-architect/lc-imooc-cli-dev/packages/init --force --debug\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="使用-lerna-在模块中安装包" tabindex="-1"><a class="header-anchor" href="#使用-lerna-在模块中安装包" aria-hidden="true">#</a> 使用 lerna 在模块中安装包</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>lerna add inquirer commands/init/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="可能出现的问题" tabindex="-1"><a class="header-anchor" href="#可能出现的问题" aria-hidden="true">#</a> 可能出现的问题</h2><p><strong>跟着学习资料开发的代码在文件目录划分上是有问题的，破坏了 lerna 的文件结构，导致安装模块的时候出现问题，也无法使用很多 lerna 命令。正式版本使用 lerna 推荐的目录</strong></p><h4 id="error-cannot-find-module-lc-imooc-cli-dev-log" tabindex="-1"><a class="header-anchor" href="#error-cannot-find-module-lc-imooc-cli-dev-log" aria-hidden="true">#</a> <code>Error: Cannot find module &#39;@lc-imooc-cli-dev/log&#39;</code></h4><p>使用<code>lerna add</code>安装包之后，会导致本地引入的包找不到，需要重新<code>npm install</code></p>',11),o={render:function(e,a){const n=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[i,(0,l.Wm)("ol",s,[(0,l.Wm)("li",null,[(0,l.Wm)("p",null,[r,(0,l.Wm)(n,{to:"/web-developer/front-end/engineering/npm.html#npm-link"},{default:(0,l.w5)((()=>[d])),_:1}),t])]),c]),h],64)}}}}]);