"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[1473],{8006:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5cd643eb",path:"/web-developer/back-end/node/node-fs.html",title:"Node 文件和系统操作",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"文件操作常用模块",slug:"文件操作常用模块",children:[]},{level:2,title:"node 文件路径",slug:"node-文件路径",children:[{level:3,title:"path 模块",slug:"path-模块",children:[]},{level:3,title:"判断当前目录是否为空",slug:"判断当前目录是否为空",children:[]}]},{level:2,title:"文件目录操作",slug:"文件目录操作",children:[{level:3,title:"创建新目录",slug:"创建新目录",children:[]},{level:3,title:"将文件添加到现有目录",slug:"将文件添加到现有目录",children:[]}]},{level:2,title:"文件操作",slug:"文件操作",children:[{level:3,title:"读取文件-redadFile",slug:"读取文件-redadfile",children:[]},{level:3,title:"写入文件-writeFile",slug:"写入文件-writefile",children:[]},{level:3,title:"删除文件-unlink",slug:"删除文件-unlink",children:[]},{level:3,title:"移动文件-rename",slug:"移动文件-rename",children:[]}]},{level:2,title:"stream 流操作",slug:"stream-流操作",children:[{level:3,title:"主要用途",slug:"主要用途",children:[]},{level:3,title:"示例",slug:"示例",children:[]}]}],filePathRelative:"web-developer/back-end/node/node-fs.md",git:{updatedTime:1679291328e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:2}]}}},4667:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="node-文件和系统操作" tabindex="-1"><a class="header-anchor" href="#node-文件和系统操作" aria-hidden="true">#</a> Node 文件和系统操作</h1><h2 id="文件操作常用模块" tabindex="-1"><a class="header-anchor" href="#文件操作常用模块" aria-hidden="true">#</a> 文件操作常用模块</h2><ul><li><p>内置模块<code>fs</code>、<code>path</code></p></li><li><p><code>fs-extra</code>: 一个用于扩展 Node.js 内置的 fs 模块的模块，提供了更多的功能和更方便的 API，例如拷贝、删除、压缩等操作。</p></li><li><p><code>glob</code>: 用于匹配文件路径模式的模块，可以查找符合特定模式的文件和目录，支持通配符和正则表达式。</p></li><li><p><code>chokidar</code>: 一个用于监听文件变化的模块，支持多种事件，例如文件创建、修改、删除等。</p></li><li><p><code>rimraf</code>: 一个用于删除文件和目录的模块，类似于 Unix 的 rm 命令，但更加强大和易用。</p></li><li><p><code>mkdirp</code>: 一个用于创建目录的模块，可以递归地创建多级目录，类似于 Unix 的 mkdir -p 命令。</p></li><li><p><code>ncp</code>: 一个用于复制文件和目录的模块，支持递归复制、过滤文件等功能。</p></li><li><p><code>tar</code>: 一个用于打包和解包 tar 文件的模块，可以处理单个文件或整个目录，并支持多种压缩格式。</p></li></ul><h2 id="node-文件路径" tabindex="-1"><a class="header-anchor" href="#node-文件路径" aria-hidden="true">#</a> node 文件路径</h2><p>环境变量：</p><ul><li><p><code>__dirname</code>：返回正在执行文件的目录，的绝对路径，<code>/Users/project/src/utils/</code></p></li><li><p><code>__filename</code>：返回正在执行文件的文件名，的绝对路径，<code>/Users/project/src/utils/test.js</code></p></li><li><p><code>process.cwd()</code>：返回当前工作目录，调用命令的主目录，<code>/Users/project/</code></p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>__dirname</code> 和 <code>__filename</code> 获取的是当前模块文件所在的目录路径和文件路径，主要用于模块内部的文件操作。而 <code>process.cwd</code>() 获取的是 Node.js 进程的当前工作目录，主要用于全局的文件操作。</p><p><code>__dirname</code> 和 <code>__filename</code>这两个变量通常用于读取、加载当前模块文件所在的其他文件，例如读取配置文件、加载中间件等。可以确保我们使用的路径是正确的，并且不受运行环境的影响。</p><p>此外，由于 Node.js 使用的是 Unix 风格的路径分隔符（/），因此在 Windows 平台上使用时，需要注意路径分隔符的转换。</p></div><h3 id="path-模块" tabindex="-1"><a class="header-anchor" href="#path-模块" aria-hidden="true">#</a> path 模块</h3><p>path 模块提供了一些方法，用于处理文件路径和目录路径，例如获取路径的各个部分、解析路径、拼接路径、判断路径是否为绝对路径等。</p><ul><li><p><code>path.join(&#39;/User&#39;, &#39;/bin&#39;, &#39;...&#39;)</code>：将多个路径拼接为一个路径（可以是相对路径或绝对路径）</p></li><li><p><code>path.resolve()</code>：将多个路径解析为一个绝对路径</p></li><li><p><code>path.relative()</code>：返回相对路径</p></li><li><p><code>path.basename(path)</code>：返回路径的最后一部分，即文件名或目录名</p></li><li><p><code>path.dirname(path)</code>：返回路径中的目录部分</p></li><li><p><code>path.extname(path)</code>：返回路径中文件的扩展名，包括<code>.</code>符号</p></li><li><p><code>path.parse(dir)</code>：解析路径为对象结构</p></li></ul><div class="custom-container tip"><p class="custom-container-title">join 和 resolve</p><p>path.join() 方法将多个路径参数拼接在一起，生成一个新的路径字符串；而 path.resolve() 方法将多个路径参数解析为一个绝对路径。</p><p>如果要拼接多个路径，而且路径中包含相对路径，那么可以使用 path.join()；如果需要将相对路径解析为绝对路径，可以使用 path.resolve()。</p></div><h3 id="判断当前目录是否为空" tabindex="-1"><a class="header-anchor" href="#判断当前目录是否为空" aria-hidden="true">#</a> 判断当前目录是否为空</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 获取当前目录</span>\n<span class="token keyword">const</span> localPath <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取当前目录下所有文件列表</span>\n<span class="token keyword">const</span> fileList <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>localPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// [] 返回一个数组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="文件目录操作" tabindex="-1"><a class="header-anchor" href="#文件目录操作" aria-hidden="true">#</a> 文件目录操作</h2><h3 id="创建新目录" tabindex="-1"><a class="header-anchor" href="#创建新目录" aria-hidden="true">#</a> 创建新目录</h3><p>使用<code>__dirname</code>创建新目录</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dirPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;/pictures&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="将文件添加到现有目录" tabindex="-1"><a class="header-anchor" href="#将文件添加到现有目录" aria-hidden="true">#</a> 将文件添加到现有目录</h3><p><code>openSync()</code>如果您的目录中不存在该文件，则使用该方法将添加该文件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;/pictures&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">openSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;hello.jpeg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h2><h3 id="读取文件-redadfile" tabindex="-1"><a class="header-anchor" href="#读取文件-redadfile" aria-hidden="true">#</a> 读取文件-redadFile</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">redadFile</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> bufferData <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bufferData<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">redadFile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="写入文件-writefile" tabindex="-1"><a class="header-anchor" href="#写入文件-writefile" aria-hidden="true">#</a> 写入文件-writeFile</h3><p>如果没有该文件，Node.js 将会创建当前文件。</p><p>第三个参数{ flag: &#39;a&#39; }，告诉 Node.js 追加到文件，而不是覆盖它。 如果您不指定标志，则默认为 &#39;w&#39;，如果文件不存在则创建一个新文件，如果文件已存在则覆盖该文件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token parameter">filePath<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span> flag<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="删除文件-unlink" tabindex="-1"><a class="header-anchor" href="#删除文件-unlink" aria-hidden="true">#</a> 删除文件-unlink</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Deleted </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">警告</p><p>当您使用该功能删除文件时 unlink()，它不会被发送到您的回收站或垃圾桶，而是从您的文件系统中永久删除。此操作不可逆！</p></div><h3 id="移动文件-rename" tabindex="-1"><a class="header-anchor" href="#移动文件-rename" aria-hidden="true">#</a> 移动文件-rename</h3><p><code>rename()</code>函数有两个参数：源文件路径和目标文件路径。此功能可以将文件移动到其他文件夹，在当前目录中重命名文件，或者同时移动和<strong>重命名</strong>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">moveFile</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> destination</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">moveFile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/data/rename.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="stream-流操作" tabindex="-1"><a class="header-anchor" href="#stream-流操作" aria-hidden="true">#</a> stream 流操作</h2><ul><li>参考慕课网课程 Node.js 开发 webServer 博客项目，资源在网盘里</li></ul><p>stream 是一种处理数据的抽象概念，可以将数据分成“块”或“流”，然后逐个处理。不必一次性把所有数据读取到内存中或一次性把所有数据写入到目标中。它可以让你在处理大型数据集变得更加高效和可靠。</p><p>使用 Stream 的优点是可以减少内存的占用，提高数据的处理速度。（提高内存效率和时间效率）</p><p>在 Stream 中，有四种基本的数据流：</p><ul><li>可读流（Readable）</li><li>可写流（Writable）</li><li>双工流（Duplex）</li><li>转换流（Transform）</li></ul><p>可读流提供了一种读取数据的方式，可写流提供了一种写入数据的方式，双工流同时支持读取和写入数据，而转换流可以通过读取输入数据并转换它们来产生输出数据。</p><p>当使用 Stream 时，数据可以通过管道（pipe）来传输，这使得数据可以在不同的 Stream 之间自由地流动。</p><h3 id="主要用途" tabindex="-1"><a class="header-anchor" href="#主要用途" aria-hidden="true">#</a> 主要用途</h3><ul><li><p>文件读写操作：使用 fs 模块中的 fs.createReadStream()和 fs.createWriteStream()</p></li><li><p>网络通信：HTTP 请求和响应通常是一个流，可以将请求体和响应体分成多个数据块进行处理</p></li><li><p>数据转换：通过使用流，可以将一种格式的数据转换为另一种格式</p></li><li><p>压缩文件</p></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p><strong>从文件中读取数据：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreadStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreadStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取完毕&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreadStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>使用 HTTP 模块处理请求和响应：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  req<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',48),t={render:function(n,s){return p}}}}]);