"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[1937],{8787:(l,i,e)=>{e.r(i),e.d(i,{data:()=>a});const a={key:"v-529d1edc",path:"/computers-core/operating-system/",title:"计算机操作系统",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"第一部分",slug:"第一部分",children:[{level:3,title:"操作系统概览",slug:"操作系统概览",children:[]},{level:3,title:"进程管理",slug:"进程管理",children:[]},{level:3,title:"作业管理",slug:"作业管理",children:[]},{level:3,title:"存储管理",slug:"存储管理",children:[]}]}],filePathRelative:"computers-core/operating-system/README.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:2}]}}},1529:(l,i,e)=>{e.r(i),e.d(i,{default:()=>s});const a=(0,e(6252).uE)('<h1 id="计算机操作系统" tabindex="-1"><a class="header-anchor" href="#计算机操作系统" aria-hidden="true">#</a> 计算机操作系统</h1><h2 id="第一部分" tabindex="-1"><a class="header-anchor" href="#第一部分" aria-hidden="true">#</a> 第一部分</h2><ul><li>操作系统概览</li><li>进程管理</li><li>作业管理</li><li>存储管理</li><li>文件管理</li><li>设备管理</li></ul><h3 id="操作系统概览" tabindex="-1"><a class="header-anchor" href="#操作系统概览" aria-hidden="true">#</a> 操作系统概览</h3><ul><li>操作系统的演进</li><li>What&amp;Why</li><li>操作系统的基本功能</li><li>操作系统相关概念</li></ul><h4 id="操作系统的演进" tabindex="-1"><a class="header-anchor" href="#操作系统的演进" aria-hidden="true">#</a> 操作系统的演进</h4><ol><li>无操作系统</li><li>批处理系统</li><li>分时系统</li></ol><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-1.png" alt="image"></p><p><strong>多道程序设计</strong></p><p>定义：指在计算机内存中同时存放多个程序，在管理程序之下相互穿插运行，是操作系统的重要功能。</p><p>解决的问题：</p><ul><li>早期批处理系统只能一次处理一个任务</li><li>多道程序设计使得批处理系统可以一次处理多个任务</li><li>大幅度提高计算机利用率</li></ul><h4 id="what-why" tabindex="-1"><a class="header-anchor" href="#what-why" aria-hidden="true">#</a> What&amp;Why</h4><ul><li><p><strong>什么是操作系统？</strong></p><ul><li>操作系统是管理计算机硬件和软件资源的<strong>计算机程序</strong></li></ul></li><li><p><strong>为什么使用操作系统？</strong></p><ul><li>可以管理配置内存、决定资源供需顺序、控制输入输出设备等</li><li>我们不能直接操作计算机硬件，操作系统提供用户与系统交互的操作界面，提高生产力</li><li>操作系统种类非常多，从手机到超级计算机都有用到</li></ul></li><li><p><strong>常见的操作系统</strong></p><ul><li>手机端 <ul><li>Android</li><li>IOS</li></ul></li><li>电脑端 <ul><li>Windows</li><li>MacOS</li><li>Linux</li></ul></li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>MIUI、ColorOS、Flyme 等系统严格来说不算操作系统，只是在 Android 操作系统下做了一些个性化的修改或优化。</p></div><h4 id="操作系统的基本功能" tabindex="-1"><a class="header-anchor" href="#操作系统的基本功能" aria-hidden="true">#</a> 操作系统的基本功能</h4><ul><li>统一管理计算机资源</li><li>对计算机资源的抽象</li><li>提供了用户与计算机之间的接口</li></ul><p><strong>统一管理计算机资源：</strong></p><ul><li>处理器资源</li><li>存储器资源</li><li>IO 设备资源</li><li>文件资源</li></ul><p><strong>对计算机资源的抽象：</strong></p><ul><li>用户无需面向硬件接口编程</li><li>比如文件管理软件，会提供操作文件的接口，我们直接使用就可以</li></ul><p><strong>提供了用户与计算机之间的接口：</strong></p><ul><li>图像窗口形式</li><li>命令形式</li><li>系统调用形式</li></ul><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2.png" alt="image"></p><h4 id="操作系统相关概念" tabindex="-1"><a class="header-anchor" href="#操作系统相关概念" aria-hidden="true">#</a> 操作系统相关概念</h4><ul><li>并发性</li><li>共享性</li><li>虚拟性</li><li>异步性</li></ul><p><strong>并发性：</strong></p><ul><li><p>并行：是指两个或多个事件可以在<strong>同一个时刻</strong>发生</p></li><li><p>并发：是指两个或多个事件可以在<strong>同一个时间间隔</strong>发生</p></li></ul><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-并发.png" alt="image"></p><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-1.png" alt="image"></p><p><strong>共享性：</strong></p><ul><li><p>操作系统中的资源可供多个并发的程序共同使用，也称为资源共享</p></li><li><p>互斥共享形式：当资源被程序 A 占用时，其他想使用的程序只能等待</p></li><li><p>同时访问形式：某种资源在一段时间内并发地被多个程序访问，这种“同时”是宏观的</p></li></ul><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-共享性.png" alt="image"></p><p><strong>虚拟性：</strong></p><ul><li>表现为把一个<code>物理实体</code>转变为若干个虚拟的<code>逻辑实体</code></li><li>主要的技术有<code>时分复用技术</code>和<code>空分复用技术</code></li></ul><p>时分复用技术:</p><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-时分复用技术.png" alt="image"></p><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-时分复用技术-2.png" alt="image"></p><p>空分复用技术:</p><ul><li>用来实现虚拟磁盘、虚拟内存等</li><li>提高资源的利用率，提升编程效率</li></ul><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-空分复用技术.png" alt="image"></p><p><strong>异步性：</strong></p><ul><li>在多道程序环境下，允许多个进程并发执行</li><li>进程在使用资源时可能需要等待或放弃</li><li>进程的执行是以走走停停的形式推进</li></ul><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-2-异步性.png" alt="image"></p><h3 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理" aria-hidden="true">#</a> 进程管理</h3><ul><li>为什么需要进程？</li><li>进程的实体</li><li>五状态模型</li><li>进程同步</li><li>Linux 的进程管理</li></ul><h4 id="为什么需要进程" tabindex="-1"><a class="header-anchor" href="#为什么需要进程" aria-hidden="true">#</a> 为什么需要进程？</h4><p>没有操作系统之前，一次只能运行一个指定的程序，资源属于当前运行的程序。加入操作系统之后，引入<code>多道程序设计</code>的概念，合理的隔离资源和运行环境，提升资源利用率。</p><ul><li>操作系统利用进程提高利用率</li><li>进程是操作系统进行资源分配和调度的<code>基本单位</code></li><li>进程是程序独立运行的载体，保障程序正常运行</li></ul><h4 id="进程的实体" tabindex="-1"><a class="header-anchor" href="#进程的实体" aria-hidden="true">#</a> 进程的实体</h4><ul><li>主存中的进程形态</li><li>进程与线程</li></ul><p><strong>主存中的进程形态：</strong></p><p>在主存里面，进程也是一段连续存储的空间，称为<code>进程控制块(PCB)</code>。在这个空间中有很多信息，有：标识符、状态、优先级、程序计数器、内存指针、上下文数据、IOS 状态信息......。</p><p>进程控制块(PCB)：</p><ul><li>用于描述和控制进程运行的通用数据结构</li><li>记录进程当前状态和控制进程运行的全部信息</li><li>PCB 使得进程是能够独立运行的基本单位</li><li>经常被读取，常驻内存中，存放在系统专门开辟的区域内</li></ul><p><strong>进程与线程：</strong></p><ul><li>进程(Process)</li><li>线程(Thread)</li></ul><p>一个进程可以有多个线程。线程是操作系统运行调度的<code>最小单位</code>，进程是<code>基本单位</code>。</p><p>操作系统的调度，实际上是对进程里面的具体线程做调度，实际运行逻辑的是线程。</p><p>一个进程可以并发多个线程，每个线程可以执行不同的任务。</p><p>进程拥有资源，里面的线程共享这些资源。</p><h4 id="五状态模型" tabindex="-1"><a class="header-anchor" href="#五状态模型" aria-hidden="true">#</a> 五状态模型</h4><p>进程状态：</p><ul><li>就绪 <ul><li>其它资源都准备好了，就只差 CPU 资源的状态下，在就绪队列中排队</li></ul></li><li>执行 <ul><li>程序在 CPU 中运行的状态</li></ul></li><li>阻塞 <ul><li>其它设备未就绪而无法继续执行的状态，在阻塞队列中排队</li></ul></li><li>创建 <ul><li>拥有 PCB 但其它资源尚未就绪的状态</li></ul></li><li>终止 <ul><li>进程结束由系统清理或归还 PCB 的状态</li></ul></li></ul><h4 id="进程同步" tabindex="-1"><a class="header-anchor" href="#进程同步" aria-hidden="true">#</a> 进程同步</h4><ul><li>为什么需要进程间同步</li><li>进程间同步的原则</li><li>线程同步</li></ul><p><strong>为什么需要进程间同步：</strong></p><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/basics/os-3-进程同步.png" alt="image"></p><p><code>生产者-消费者问题</code>，两者并发执行可能会出差错。</p><p><code>哲学家进餐问题</code>。</p><p>问题的根源是彼此之间没有通信，所以需要进程间的同步，解决竞争资源在多进程间使用次序的协调，使并发执行的多个程序可以有效的利用资源与相互合作。</p><p><strong>进程间同步的原则：</strong></p><p><code>临界资源</code>：指一些虽作为共享资源，却又无法同时被多个线程共同访问的共享资源。当有进程在使用临界资源时，其他进程需要等待进程释放。</p><p>同步原则：</p><ul><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ul><p>同步方法：</p><ul><li>消息队列</li><li>共享存储</li><li>信号量</li></ul><p><strong>线程同步：</strong></p><p>进程内多线程并发使用资源也会遇到进程所遇到的相同问题，所以也需要同步。</p><p>同步方法：</p><ul><li>互斥量</li><li>读写锁</li><li>自旋锁</li><li>条件变量</li></ul><h4 id="linux-的进程管理" tabindex="-1"><a class="header-anchor" href="#linux-的进程管理" aria-hidden="true">#</a> Linux 的进程管理</h4><ul><li>进程的类型</li><li>进程的标记</li><li>Linux 操作进程的相关命令</li></ul><p><strong>进程的类型：</strong></p><ul><li>前台进程：具有终端，可以和用户进行交互的进程。比如：终端 Shell。</li><li>后台进程：没有占用终端，不和用户进行交互的就是后台进程，优先级比前台进程低。</li><li>守护进程：是特殊的后台进程，在系统引导时启动，一直运行到系统关闭。比如：crond、httpd、sshd、mysqld。</li></ul><p><strong>进程的标记</strong></p><ul><li>进程的 ID：唯一标记，非负整数，由系统限定。进程 A 创建进程 B，之间就是父子关系</li><li>进程的状态标记：状态符号有 R、S、D、T、Z</li></ul><p><strong>Linux 操作进程的相关命令：</strong></p><ul><li>ps 命令</li><li>top 命令</li><li>kill 命令</li></ul><h3 id="作业管理" tabindex="-1"><a class="header-anchor" href="#作业管理" aria-hidden="true">#</a> 作业管理</h3><ul><li>进程调度概述</li><li>进程调度的算法</li></ul><h4 id="进程调度概述" tabindex="-1"><a class="header-anchor" href="#进程调度概述" aria-hidden="true">#</a> 进程调度概述</h4><p>进程调度是指计算机通过决策决定，哪个就绪进程可以获得 CPU 使用权。</p><ol><li>保留旧进程的运行信息，请出旧进程</li><li>选择新进程，准备运行环境并分配 CPU</li></ol><h4 id="进程调度的算法" tabindex="-1"><a class="header-anchor" href="#进程调度的算法" aria-hidden="true">#</a> 进程调度的算法</h4><ul><li>先来先服务调度算法</li><li>短进程优先调度算法</li><li>高优先权优先调度算法</li><li>时间片轮转调度算法</li></ul><h3 id="存储管理" tabindex="-1"><a class="header-anchor" href="#存储管理" aria-hidden="true">#</a> 存储管理</h3><ul><li>内存分配的过程</li><li>内存回收的过程</li></ul><h4 id="内存分配的过程" tabindex="-1"><a class="header-anchor" href="#内存分配的过程" aria-hidden="true">#</a> 内存分配的过程</h4>',99),s={render:function(l,i){return a}}}}]);