"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[414],{1407:(e,a,l)=>{l.r(a),l.d(a,{data:()=>i});const i={key:"v-657a4f25",path:"/web-developer/front-end/javascript/design-pattern.html",title:"设计模式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"装饰器模式",slug:"装饰器模式",children:[{level:3,title:"使用场景",slug:"使用场景",children:[]},{level:3,title:"ES7 语法",slug:"es7-语法",children:[]}]}],filePathRelative:"web-developer/front-end/javascript/design-pattern.md",git:{updatedTime:1678672401e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},9250:(e,a,l)=>{l.r(a),l.d(a,{default:()=>t});const i=(0,l(6252).uE)('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><h2 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式" aria-hidden="true">#</a> 装饰器模式</h2><ul><li>为对象添加新功能</li><li>不改变其原有的结构和功能</li></ul><p>在该模式中，有一个被装饰的对象和一个或多个装饰器对象，它们共同实现某个接口，这样可以使得装饰器对象和被装饰对象可以互换使用。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ol><li>当需要给一个对象添加一些额外的行为或功能时，但是不想修改这个对象的代码时，可以使用装饰器模式。</li><li>当需要动态地给一个对象添加行为或功能时，可以使用装饰器模式。</li><li>当需要在运行时动态地组合对象时，可以使用装饰器模式。</li></ol><h3 id="es7-语法" tabindex="-1"><a class="header-anchor" href="#es7-语法" aria-hidden="true">#</a> ES7 语法</h3><ul><li><code>@</code></li></ul>',8),t={render:function(e,a){return i}}}}]);