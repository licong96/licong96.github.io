"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[8961],{7459:(e,t,d)=>{d.r(t),d.d(t,{data:()=>a});const a={key:"v-d1ed3056",path:"/web-developer/project-design/want-to-do/lc-utils.html",title:"常用工具包",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"包设计",slug:"包设计",children:[{level:3,title:"1. 目录结构设计",slug:"_1-目录结构设计",children:[]},{level:3,title:"2. 分包设计",slug:"_2-分包设计",children:[]}]}],filePathRelative:"web-developer/project-design/want-to-do/lc-utils.md",git:{updatedTime:1663581691e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},4895:(e,t,d)=>{d.r(t),d.d(t,{default:()=>r});const a=(0,d(6252).uE)('<h1 id="常用工具包" tabindex="-1"><a class="header-anchor" href="#常用工具包" aria-hidden="true">#</a> 常用工具包</h1><p>将我在工作中经常会使用到的功能抽离出来做成工具函数，发布到 npm 包中，方便自己使用。</p><h4 id="我的目的是" tabindex="-1"><a class="header-anchor" href="#我的目的是" aria-hidden="true">#</a> 我的目的是</h4><p>提高开发效率，节省时间，不用每个项目都复制文件，复制函数，查看函数名，我只需要引入自己的包文件。</p><h4 id="方法来源" tabindex="-1"><a class="header-anchor" href="#方法来源" aria-hidden="true">#</a> 方法来源</h4><p>先查看我以前开发过的所有项目，将<code>utils</code>中的所有函数全部翻出来，考虑业务场景，决定是否需要。</p><p>再查看已有的工具包，比如 lodash、Underscore，改进自己的方法</p><h2 id="包设计" tabindex="-1"><a class="header-anchor" href="#包设计" aria-hidden="true">#</a> 包设计</h2><ol><li><p>目录结构设计</p></li><li><p>分包设计</p></li></ol><h3 id="_1-目录结构设计" tabindex="-1"><a class="header-anchor" href="#_1-目录结构设计" aria-hidden="true">#</a> 1. 目录结构设计</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>index.js</td><td>入口文件</td></tr><tr><td><code>/libs</code></td><td>所有方法</td></tr></tbody></table><h3 id="_2-分包设计" tabindex="-1"><a class="header-anchor" href="#_2-分包设计" aria-hidden="true">#</a> 2. 分包设计</h3>',12),r={render:function(e,t){return a}}}}]);