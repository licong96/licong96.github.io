"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4120],{1397:(e,a,i)=>{i.r(a),i.d(a,{data:()=>l});const l={key:"v-10c69e52",path:"/web-developer/front-end/engineering/git.html",title:"git",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Git Bash",slug:"git-bash",children:[]},{level:2,title:"git commit 规范指南",slug:"git-commit-规范指南",children:[]},{level:2,title:"分支",slug:"分支",children:[]},{level:2,title:"Tag 发版",slug:"tag-发版",children:[{level:3,title:"回滚",slug:"回滚",children:[]}]},{level:2,title:"暂存",slug:"暂存",children:[{level:3,title:"创建一个新的存储库",slug:"创建一个新的存储库",children:[]},{level:3,title:"推送现有的存储库",slug:"推送现有的存储库",children:[]},{level:3,title:"每次都需要输入用户名和密码的解决方法",slug:"每次都需要输入用户名和密码的解决方法",children:[]}]},{level:2,title:"git 操作规范",slug:"git-操作规范",children:[{level:3,title:"分支管理",slug:"分支管理",children:[]},{level:3,title:"Github flow",slug:"github-flow",children:[]}]}],filePathRelative:"web-developer/front-end/engineering/git.md",git:{updatedTime:1676882536e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:4},{name:"黎聪",email:"licong23@xdf.cn",commits:3}]}}},3019:(e,a,i)=>{i.r(a),i.d(a,{default:()=>r});var l=i(6252);const n=(0,l.uE)('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> git</h1><h2 id="git-bash" tabindex="-1"><a class="header-anchor" href="#git-bash" aria-hidden="true">#</a> Git Bash</h2><p>Windows 安装 Git 之后，同时会安装好 Shell 脚本工具，<code>Git Bash</code>界面可以直接执行 Shell 脚本。</p><h2 id="git-commit-规范指南" tabindex="-1"><a class="header-anchor" href="#git-commit-规范指南" aria-hidden="true">#</a> git commit 规范指南</h2><p>用于说明 commit 的类别，只允许使用下面 7 个标识。</p><ul><li><p>feat：新功能</p></li><li><p>fix：修补 bug</p></li><li><p>docs：文档（documentation）</p></li><li><p>style： 格式（不影响代码运行的变动）</p></li><li><p>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</p></li><li><p>perf：优化相关，比如提升性能、体验</p></li><li><p>test：增加测试</p></li><li><p>merge：代码合并</p></li><li><p>chore：构建过程或辅助工具的变动</p></li></ul><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><ul><li><p>git branch: 查看分支</p></li><li><p>git checkout: 切换分支</p></li><li><p><code>git checkout -b &lt;name&gt;</code>: 创建并切换到新分支</p></li><li><p><code>git branch -d &lt;name&gt;</code>: 删除本地分支</p></li><li><p>git merge: 将指定分支合并到当前分支</p></li></ul><h2 id="tag-发版" tabindex="-1"><a class="header-anchor" href="#tag-发版" aria-hidden="true">#</a> Tag 发版</h2><p>每一次发布线上版本，都需要添加一个<code>tag</code></p><ul><li>添加 tag: <code>git tag -a &lt;tagname&gt; -m &quot;added description release notes&quot;</code></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag -a v1.0-beta -m <span class="token string">&quot;v1.0 beta版本发布上线&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>查看 tag: <code>git tag</code></p></li><li><p>删除 tag: <code>git tag -d &lt;tagname&gt;</code></p></li><li><p>推送 tag: <code>git push origin &lt;tagname&gt; </code></p></li></ul><h3 id="回滚" tabindex="-1"><a class="header-anchor" href="#回滚" aria-hidden="true">#</a> 回滚</h3><ul><li>第一步：进行本地回滚</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git reset --hard commit节点\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>第二步：推送至远程</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git push -f\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="暂存" tabindex="-1"><a class="header-anchor" href="#暂存" aria-hidden="true">#</a> 暂存</h2><ul><li>git stash: 将修改暂存，再去新建分支，然后在新分支上恢复</li><li>git stash pop: 将暂存的修改恢复</li></ul><h3 id="创建一个新的存储库" tabindex="-1"><a class="header-anchor" href="#创建一个新的存储库" aria-hidden="true">#</a> 创建一个新的存储库</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> init\n<span class="token function">git</span> <span class="token function">add</span> README.md\n<span class="token function">git</span> commit -m <span class="token string">&quot;first commit&quot;</span>\n<span class="token function">git</span> branch -M main\n<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/licong96/case3-old-island.git\n<span class="token function">git</span> push -u origin main\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="推送现有的存储库" tabindex="-1"><a class="header-anchor" href="#推送现有的存储库" aria-hidden="true">#</a> 推送现有的存储库</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/licong96/case3-old-island.git\n<span class="token function">git</span> branch -M main\n<span class="token function">git</span> push -u origin main\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="每次都需要输入用户名和密码的解决方法" tabindex="-1"><a class="header-anchor" href="#每次都需要输入用户名和密码的解决方法" aria-hidden="true">#</a> 每次都需要输入用户名和密码的解决方法</h3><p>执行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global credential.helper store\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>会在本地生成一个文本，上边记录账号和密码</p><p>然后你使用上述的命令配置好之后，再操作一次 git pull，然后它会提示你输入账号密码，这一次之后就不需要再次输入密码了。</p><h2 id="git-操作规范" tabindex="-1"><a class="header-anchor" href="#git-操作规范" aria-hidden="true">#</a> git 操作规范</h2><ul><li>拉新分支 <code>feature-xxx</code>、<code>fix-xxx</code>、<code>hotfix-xxx</code></li><li>修改代码</li><li>commit 规范</li><li>往 dev 分支提交 pr Pull Request</li><li>代码走查</li><li>合并代码到 dev</li><li>等待发布上线</li></ul><h3 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h3><p><img src="http://www.casssb.com/assets/images/knowledge/computers/architect/gitguifan.png" alt="image"></p><ol><li><p>从公司代码仓库中 fork 一份到自己的仓库里，自己所有的开发都在自己的仓库里，就不会影响到公司仓库。</p></li><li><p>从你的仓库中<code>git clone</code>到你本地做开发。</p></li><li><p>从 master 分支中新建一个 dev 分支，比如<code>dev/0.0.1</code>，开发完成之后，做一系列 git 操作，准备上线，合并到 master。</p></li><li><p>从你的仓库<code>pull request</code>到公司代码仓库，代码检测通过之后合并，创建 tags 为<code>release/0.0.1</code>并且删除开发分支，发布上线。</p></li></ol><p><strong>传统方式：</strong><img src="http://www.casssb.com/assets/images/knowledge/computers/architect/git-flow-分支管理.jpg" alt="image"></p><h3 id="github-flow" tabindex="-1"><a class="header-anchor" href="#github-flow" aria-hidden="true">#</a> Github flow</h3><p>简化方式，最大的优点就是简单</p>',37),s=(0,l.Uk)("参考文档："),t={href:"https://www.cnblogs.com/javaxubo/p/16652845.html#_label5",target:"_blank",rel:"noopener noreferrer"},c=(0,l.Uk)("https://www.cnblogs.com/javaxubo/p/16652845.html#_label5"),r={render:function(e,a){const i=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[n,(0,l.Wm)("p",null,[s,(0,l.Wm)("a",t,[c,(0,l.Wm)(i)])])],64)}}}}]);