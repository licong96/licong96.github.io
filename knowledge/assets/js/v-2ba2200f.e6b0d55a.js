"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[8046],{6040:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-2ba2200f",path:"/web-developer/back-end/node/node-command.html",title:"Node 命令行与环境变量",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"命令行",slug:"命令行",children:[{level:3,title:"命令行参数",slug:"命令行参数",children:[]}]},{level:2,title:"环境变量",slug:"环境变量",children:[{level:3,title:"添加环境变量",slug:"添加环境变量",children:[]},{level:3,title:"访问环境变量",slug:"访问环境变量",children:[]},{level:3,title:"CLI 工具",slug:"cli-工具",children:[]},{level:3,title:"终止 Node.js 进程",slug:"终止-node-js-进程",children:[]}]}],filePathRelative:"web-developer/back-end/node/node-command.md",git:{updatedTime:1678672401e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},4182:(e,a,n)=>{n.r(a),n.d(a,{default:()=>c});const s=(0,n(6252).uE)('<h1 id="node-命令行与环境变量" tabindex="-1"><a class="header-anchor" href="#node-命令行与环境变量" aria-hidden="true">#</a> Node 命令行与环境变量</h1><h2 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h2><blockquote><p>详细内容可查看脚手架工具</p></blockquote><ul><li><code>Commander.js</code>包</li></ul><h3 id="命令行参数" tabindex="-1"><a class="header-anchor" href="#命令行参数" aria-hidden="true">#</a> 命令行参数</h3><p>通过<code>process.argv</code>获取命令行参数的数组。</p><p>当使用命令行运行 Node.js 应用程序时，可以在命令行中添加参数。</p><p>process.argv 数组的第一个元素是 Node.js 可执行文件的路径，第二个元素是 Node.js 应用程序的入口文件的路径，后面的元素则是命令行传递给应用程序的参数。</p><p>接收命令行参数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// print-args.js</span>\n<span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p><code>process.env</code>是 Node.js 程序运行时注入的全局对象，该对象表示当前进程的环境变量。</p><p>主要用途之一是为 Node.js 应用程序提供动态配置。通过设置环境变量，可以在不同的运行环境中动态地配置应用程序的行为。</p><p>例如，可以通过设置 <code>NODE_ENV</code> 环境变量来指定应用程序的运行环境（例如开发环境、测试环境、生产环境等），从而启用或禁用特定的功能或行为。</p><p>另外，也可以用于存储敏感信息，例如数据库密码等，避免将这些信息硬编码在代码中。</p><h3 id="添加环境变量" tabindex="-1"><a class="header-anchor" href="#添加环境变量" aria-hidden="true">#</a> 添加环境变量</h3><h4 id="直接添加" tabindex="-1"><a class="header-anchor" href="#直接添加" aria-hidden="true">#</a> 直接添加</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;变量名&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;变量值&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用-dotenv-添加" tabindex="-1"><a class="header-anchor" href="#使用-dotenv-添加" aria-hidden="true">#</a> 使用 DotEnv 添加</h4><p><code>DotEnv</code>是一个轻量级的 npm 包，可以自动将<code>.env</code>文件中自定义的环境变量加载到<code>process.env</code>对象中。需要安装并配置。</p><h3 id="访问环境变量" tabindex="-1"><a class="header-anchor" href="#访问环境变量" aria-hidden="true">#</a> 访问环境变量</h3><p>通过<code>process.env</code>对象来访问环境变量的值</p><h3 id="cli-工具" tabindex="-1"><a class="header-anchor" href="#cli-工具" aria-hidden="true">#</a> CLI 工具</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="终止-node-js-进程" tabindex="-1"><a class="header-anchor" href="#终止-node-js-进程" aria-hidden="true">#</a> 终止 Node.js 进程</h3><p>使用<code>process.exit()</code>方法，该方法可以接受一个退出码作为参数，这个退出码可以用来表示进程的状态。 需要注意的是，当调用 process.exit()方法时，Node.js 进程将立即退出，并且不会等待异步操作的完成。</p><p>如果需要在退出进程之前完成一些异步操作，可以使用<code>process.on(&#39;exit&#39;,...)</code>事件来实现。该事件会在 Node.js 进程即将退出时触发，并且可以执行一些必要的清理操作。</p>',27),c={render:function(e,a){return s}}}}]);