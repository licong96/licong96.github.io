"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4574],{6447:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-50bdc7be",path:"/web-developer/back-end/node/node-async.html",title:"Node 异步编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"事件发射器（Event Emitter）",slug:"事件发射器-event-emitter",children:[{level:3,title:"使用场景",slug:"使用场景",children:[]},{level:3,title:"使用方式",slug:"使用方式",children:[]}]},{level:2,title:"事件循环（Node.js Event Loop）",slug:"事件循环-node-js-event-loop",children:[{level:3,title:"阶段优先级",slug:"阶段优先级",children:[]},{level:3,title:"示例",slug:"示例",children:[]},{level:3,title:"timers 阶段",slug:"timers-阶段",children:[]},{level:3,title:"poll 阶段",slug:"poll-阶段",children:[]},{level:3,title:"check 阶段",slug:"check-阶段",children:[]},{level:3,title:"process.nextTick",slug:"process-nexttick",children:[]}]}],filePathRelative:"web-developer/back-end/node/node-async.md",git:{updatedTime:1678672401e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:3}]}}},8532:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6252);const t=(0,e.uE)('<h1 id="node-异步编程" tabindex="-1"><a class="header-anchor" href="#node-异步编程" aria-hidden="true">#</a> Node 异步编程</h1><ol><li>事件发射器</li><li>事件循环</li></ol><h2 id="事件发射器-event-emitter" tabindex="-1"><a class="header-anchor" href="#事件发射器-event-emitter" aria-hidden="true">#</a> 事件发射器（Event Emitter）</h2><p>用于处理事件和异步编程。它是一个基于观察者模式（Observer pattern）的设计模式，用于将事件和事件处理器（或回调函数）解耦，从而使得应用程序更加模块化和可维护。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ul><li>处理 HTTP 请求和响应</li><li>处理文件系统操作</li><li>处理数据库操作</li><li>处理用户界面事件等等</li></ul><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h3><ul><li>on(eventName, listener)：为指定事件注册一个监听器，每次触发事件时都会调用该监听器。</li><li>emit(eventName, [arg1], [arg2], [...])：触发指定事件，并将可选参数传递给监听器。</li><li>removeListener(eventName, listener)：从指定事件的监听器数组中移除一个监听器。</li><li>once(eventName, listener)：为指定事件注册一个单次监听器，当事件触发时，监听器会被移除，然后再调用。</li></ul><p>示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Node.js 提供了内置模块`events`</span>\n<span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册事件</span>\neventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;started&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 发送事件</span>\neventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="事件循环-node-js-event-loop" tabindex="-1"><a class="header-anchor" href="#事件循环-node-js-event-loop" aria-hidden="true">#</a> 事件循环（Node.js Event Loop）</h2><p>流程总结：</p><ol><li><p>在主调用栈结束后，会优先处理 prcoess.nextTick 以及之前所有产生的微任务</p></li><li><p>之后正式进入 EventLoop 事件队列，首先是 timers 阶段，会检查 timers 中是否存在满足条件的定时器任务。当存在时，会依次取出对应的 timer （定时器产生的回调）推入 stack （JS 执行栈）中进行执行。</p></li><li><p>每当执行完毕后仍然会进行 Prcess.nextTick -&gt; 微任务执行的步骤。</p></li><li><p>此后，在清空队列中所有的 timer 后，Loop 进入 poll 阶段进行轮询。</p></li><li><p>如果存在 I/O 相关 callback，那么推入对应 JS 调用栈进行执行，同样每次任务执行完毕会伴随清空随之产生的 Process.nextTick 以及微任务。（注意，如果此阶段产生了 timer 并不会在本次 Loop 中执行，因为此时 EventLoop 已经到达 poll 阶段）</p></li></ol><ul><li>5.1 如果轮询队列不是空的，事件循环将循环访问回调队列并同步执行它们。</li><li>5.2 如果轮询队列是空的 <ul><li>5.2.1 如果脚本被 setImmediate() 调度，则事件循环将结束 poll(轮询) 阶段，并继续 check(检查) 阶段</li><li>5.2.2 如果脚本 未被 setImmediate()调度，则事件循环将等待回调被添加到队列中，也就是会出现阻塞，会回头检查 loop 中是否存在到达时间的 timer，然后立即执行。</li></ul></li></ul><h4 id="node-js-事件循环分为-6-个阶段-宏任务" tabindex="-1"><a class="header-anchor" href="#node-js-事件循环分为-6-个阶段-宏任务" aria-hidden="true">#</a> Node.js 事件循环分为 6 个阶段（宏任务）：</h4><ol><li><p>timers：执行 setTimeout() 和 setInterval() 的回调函数</p></li><li><p>I/O callbacks：处理网络请求、访问数据库、读取文件。上一次循环队列中，还未执行完毕的会在这个阶段进行执行</p></li><li><p>idle, prepare：仅在内部使用。</p></li><li><p>poll：被称为轮询阶段，它主要会检测新的 I/O 回调，需要注意的是在适当的条件下会存在阻塞</p></li><li><p>check：检测 setImmediate() 回调函数在这个阶段进行执行</p></li><li><p>close callbacks：这个阶段会执行一系列关闭的回调函数</p></li></ol><p><img src="http://www.casssb.com/assets/images/knowledge/computers/node/event-loop.png" alt="image"></p><h4 id="每一个宏任务阶段都包含一个微任务队列" tabindex="-1"><a class="header-anchor" href="#每一个宏任务阶段都包含一个微任务队列" aria-hidden="true">#</a> 每一个宏任务阶段都包含一个微任务队列：</h4><ol><li><p>process.nextTick()：会在当前任务执行完成后立即执行，因此它的优先级最高。</p></li><li><p>Promise/async/await：会在 process.nextTick() 之后执行。</p></li><li><p>queueMicrotask()：方法也会在 Promise 之后执行，</p></li></ol><h4 id="和浏览器中的-event-loop-对比" tabindex="-1"><a class="header-anchor" href="#和浏览器中的-event-loop-对比" aria-hidden="true">#</a> 和浏览器中的 event-loop 对比</h4>',20),p=(0,e.Uk)("参考浏览器中 JavaScript 异步"),l=(0,e.uE)('<ul><li><p>Node.js 同样使用 ES 语法，也是单线程，也需要异步</p></li><li><p>都是执行完一个宏(macro)任务后清空本次队列中的微(micro)任务</p></li><li><p>异步任务也分：宏任务和微任务</p></li><li><p>但是，Node.js 中的宏任务和微任务分不同类型，有不同优先级</p></li><li><p>Node.js 针对于 EventLoop 实现一些自定义的额外队列，基于 Libuv</p></li></ul><h3 id="阶段优先级" tabindex="-1"><a class="header-anchor" href="#阶段优先级" aria-hidden="true">#</a> 阶段优先级</h3><ol><li><p>event loop 的每个阶段都有一个该阶段对应的队列和一个微任务队列</p></li><li><p>当 event loop 到达某个阶段时，将执行该阶段的任务队列（先执行阶段队列，再执行微任务队列），直到队列清空或执行的回调达到系统上限后，才会转入下一个阶段</p></li><li><p>当所有阶段被顺序执行一次后，称 event loop 完成了一个 tick</p></li></ol><div class="custom-container tip"><p class="custom-container-title">注意</p><p>微任务中的 Promise 和 queueMicrotask 优先级问题，我用代码测试的结果是相同的，在调用栈中谁先执行，谁优先级高。可能和 Node 版本有关。</p><p>需要注意的是，微任务的执行顺序可能会因不同的实现而有所不同。</p><p>重点是 timers、poll、check 这三个阶段，开发中使用最多，影响着我们代码书写的执行顺序。</p></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;setImmediate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;promise then&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// queueMicrotask(() =&gt; {</span>\n<span class="token comment">//   console.info(&#39;queueMicrotask&#39;);  // 和Promise有相同的优先级</span>\n<span class="token comment">// });</span>\n\nprocess<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;process.nextTick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="timers-阶段" tabindex="-1"><a class="header-anchor" href="#timers-阶段" aria-hidden="true">#</a> timers 阶段</h3><p>timers 是事件循环的第一个阶段，当我们使用 setTimeout 或者 setInterval 时，node 会添加一个 timer 到 timers 堆，当事件循环进入到 timers 阶段时，node 会检查 timers 堆中有无过期的 timer，如果有，则依次执行过期 timer 的回调函数。</p><h4 id="settimeout-和-setimmediate" tabindex="-1"><a class="header-anchor" href="#settimeout-和-setimmediate" aria-hidden="true">#</a> setTimeout 和 setImmediate</h4><p>二者非常相似，但是二者区别取决于他们什么时候被调用：</p><ol><li>setImmediate 设计在 poll 阶段完成时执行，即 check 阶段；</li><li>setTimeout 设计在 poll 阶段为空闲时，且设定时间到达后执行（在 poll 阶段阻塞时会检查有无过期 timer，有则回到 timers 阶段执行 timer 的回调）；</li></ol><p>当二者在异步 I/O callback 内部调用时，总是先执行 setImmediate，再执行 setTimeout:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;immediate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 多次执行结果相同</span>\n<span class="token comment">// immediate</span>\n<span class="token comment">// timeout</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>因为 fs.readFile callback 执行完后，程序设定了 timer 和 setImmediate，因此 poll 阶段不会被阻塞进而进入 check 阶段先执行 setImmediate，后进入 timer 阶段执行 setTimeout。</p><h3 id="poll-阶段" tabindex="-1"><a class="header-anchor" href="#poll-阶段" aria-hidden="true">#</a> poll 阶段</h3><p>poll 阶段主要有 2 个功能：</p><ol><li>处理 poll 队列的事件</li><li>计算应该阻塞和轮询 I/O 的时间（当有新的 I/O 完成，I/O callback 加入 poll queue，然后执行 I/O callback；当有已超时的 timer，进入 timers 阶段执行它的回调函数）</li></ol><ul><li>若有预设的 setImmediate(), event loop 将结束 poll 阶段进入 check 阶段，并执行 check 阶段的任务队列</li><li>若没有预设的 setImmediate()，event loop 将阻塞在该阶段等待</li></ul><h3 id="check-阶段" tabindex="-1"><a class="header-anchor" href="#check-阶段" aria-hidden="true">#</a> check 阶段</h3><p>这个阶段允许在 poll 阶段结束后立即执行回调，如果 poll 阶段空闲并且有被 setImmediate 设置回调，那么事件循环直接跳到 check 阶段执行而不是阻塞在 poll 阶段等待回调被加入。</p><p>setImmediate 的回调会被加入 check 队列中。它使用 libuv 的 API 来设定在 poll 阶段结束后立即执行回调。</p><h4 id="setimmediate" tabindex="-1"><a class="header-anchor" href="#setimmediate" aria-hidden="true">#</a> setImmediate</h4><p>用于将一个函数添加到事件循环的下一个队列中，等待当前队列的所有任务执行完成后立即执行。</p><p>通常情况下，使用 setImmediate 比使用 setTimeout 更加高效，因为 setTimeout 的最小时间粒度是 1 毫秒（设置为 0 也是 1），而 setImmediate 可以在下一个事件循环迭代中立即执行任务。</p><h3 id="process-nexttick" tabindex="-1"><a class="header-anchor" href="#process-nexttick" aria-hidden="true">#</a> process.nextTick</h3><p>process.nextTick 的回调函数会被添加到 nextTickQueue，nextTickQueue 比其他 microtaskQueue 具有更高的优先级。</p><p>nextTick 不在 event loop 的任何阶段执行，而是在各个阶段切换的中间执行，即从一个阶段切换到下个阶段前执行。</p><p>官方推荐使用 setImmediate 代替 process.nextTick()，来提高性能。因为递归调用 process.nextTick()会阻塞程序，而 setImmediate 不会。</p>',28),o={render:function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[(0,e.Wm)(a,{to:"/web-developer/front-end/javascript/async.html"},{default:(0,e.w5)((()=>[p])),_:1})]),l],64)}}}}]);