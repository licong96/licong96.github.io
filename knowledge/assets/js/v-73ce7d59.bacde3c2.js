"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[5995],{18:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-73ce7d59",path:"/web-developer/back-end/java/operational-database.html",title:"JDBC 操作数据库",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"JDBC 使用",slug:"jdbc-使用",children:[{level:3,title:"JDBC 驱动程序",slug:"jdbc-驱动程序",children:[]}]},{level:2,title:"SQL 注入攻击的应对",slug:"sql-注入攻击的应对",children:[]},{level:2,title:"数据库写入方法",slug:"数据库写入方法",children:[{level:3,title:"INSERT",slug:"insert",children:[]},{level:3,title:"UPDATE",slug:"update",children:[]}]},{level:2,title:"DBUtils",slug:"dbutils",children:[]},{level:2,title:"Apache Commons DBUtils",slug:"apache-commons-dbutils",children:[]},{level:2,title:"事务机制",slug:"事务机制",children:[{level:3,title:"自动提交模式",slug:"自动提交模式",children:[]},{level:3,title:"手动提交模式",slug:"手动提交模式",children:[]}]},{level:2,title:"数据库查询方法",slug:"数据库查询方法",children:[{level:3,title:"分页：limit",slug:"分页-limit",children:[]},{level:3,title:"时间日期处理",slug:"时间日期处理",children:[]},{level:3,title:"数据批处理",slug:"数据批处理",children:[]}]},{level:2,title:"连接池的使用",slug:"连接池的使用",children:[{level:3,title:"Druid 连接池",slug:"druid-连接池",children:[]},{level:3,title:"常见错误",slug:"常见错误",children:[]}]}],filePathRelative:"web-developer/back-end/java/operational-database.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},6265:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t=(0,p.uE)('<h1 id="jdbc-操作数据库" tabindex="-1"><a class="header-anchor" href="#jdbc-操作数据库" aria-hidden="true">#</a> JDBC 操作数据库</h1><ul><li>JDBC 使用</li><li>SQL 注入攻击的应对</li><li>数据库查询方法</li><li>数据库写入方法</li><li>连接池的使用</li><li>DBUtils</li><li>Apache Commons DBUtils</li></ul><h2 id="jdbc-使用" tabindex="-1"><a class="header-anchor" href="#jdbc-使用" aria-hidden="true">#</a> JDBC 使用</h2><p>全称：<code>Java DataBase Connectivity</code>，Java 数据库连接，是 Java 语言操作数据库的一种规范，是一种用于执行 SQL 语句的 Java API，可以为多种关系数据库提供统一访问，它由一组用 Java 语言编写的类和接口组成。</p><h4 id="_1-加载并注册数据库-jdbc-驱动" tabindex="-1"><a class="header-anchor" href="#_1-加载并注册数据库-jdbc-驱动" aria-hidden="true">#</a> 1. 加载并注册数据库 JDBC 驱动</h4><p>下载数据库 jar 包，添加到项目文件夹<code>lib</code>中，在开发工具中选择<code>File</code> -&gt; <code>Project Structure</code> -&gt; <code>Modules</code> -&gt; <code>Dependencies</code>添加 jar 包。 代码中使用 Class.forName() 方法加载并注册数据库驱动，如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_2-创建数据库连接" tabindex="-1"><a class="header-anchor" href="#_2-创建数据库连接" aria-hidden="true">#</a> 2. 创建数据库连接</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> dbURL <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/imooc_java?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;severTimezone=Aisa/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> dbUsername <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> dbPassword <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dbURL<span class="token punctuation">,</span>dbUsername<span class="token punctuation">,</span> dbPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-创建-statement-对象" tabindex="-1"><a class="header-anchor" href="#_3-创建-statement-对象" aria-hidden="true">#</a> 3. 创建 Statement 对象</h4><p>用来创建 SQL 语句</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;select * from employee where dname=&#39;研发部&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_4-遍历查询结果" tabindex="-1"><a class="header-anchor" href="#_4-遍历查询结果" aria-hidden="true">#</a> 4. 遍历查询结果</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Integer</span> eno <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span> ename <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;ename&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">Float</span> salary <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span> dname <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;dname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eno <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> ename <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> salary <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> dname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_5-关闭连接-释放资源" tabindex="-1"><a class="header-anchor" href="#_5-关闭连接-释放资源" aria-hidden="true">#</a> 5. 关闭连接，释放资源</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="jdbc-驱动程序" tabindex="-1"><a class="header-anchor" href="#jdbc-驱动程序" aria-hidden="true">#</a> JDBC 驱动程序</h3><p>需要从各大数据库厂商的官网下载对应数据库的驱动程序。</p>',18),e=(0,p.Uk)("下载地址："),o={href:"https://dev.mysql.com/downloads/connector/j/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("https://dev.mysql.com/downloads/connector/j/"),l=(0,p.uE)('<h2 id="sql-注入攻击的应对" tabindex="-1"><a class="header-anchor" href="#sql-注入攻击的应对" aria-hidden="true">#</a> SQL 注入攻击的应对</h2><p>解决方法：使用 PreparedStatement 对象代替 Statement</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from employee where ename=? and salary=?&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ename<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="数据库写入方法" tabindex="-1"><a class="header-anchor" href="#数据库写入方法" aria-hidden="true">#</a> 数据库写入方法</h2><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> INSERT</h3><p>所有写操作都是使用<code>executeUpdate</code>方法，返回值是<code>int</code>类型，表示影响的行数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into employee(eno, ename, salary, dname) values(?, ?, ?, ?)&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> eno<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> ename<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> dname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> cnt <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;cnt: &quot;</span> <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> UPDATE</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update employee set salary=? where eno=?&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> eno<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> cnt <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;cnt: &quot;</span> <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="dbutils" tabindex="-1"><a class="header-anchor" href="#dbutils" aria-hidden="true">#</a> DBUtils</h2><p>封装 DBUtils 工具方法。</p><p>创建新的数据库连接，和关闭数据库连接。</p><h2 id="apache-commons-dbutils" tabindex="-1"><a class="header-anchor" href="#apache-commons-dbutils" aria-hidden="true">#</a> Apache Commons DBUtils</h2><p>Apache Commons DBUtils 是 Apache 组织提供的一个开源 JDBC 工具类库，它是对 JDBC 的简单封装，学习成本极低，并且使用 DBUtils 可以极大简化 JDBC 编码的工作量，同时也不会影响程序的性能。</p><h2 id="事务机制" tabindex="-1"><a class="header-anchor" href="#事务机制" aria-hidden="true">#</a> 事务机制</h2><p>事务是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。不能只执行其中的一部分操作。</p><p>使用场景，比如银行转账，需要保证转账的两个操作要么都执行，要么都不执行。 批量操作，比如批量插入，需要保证所有数据都插入成功，要么都不插入。如果有一条失败，那就全部回滚。</p><p>JDBC 有两种事物模式：</p><ul><li>自动提交模式</li><li>手动提交模式</li></ul><h3 id="自动提交模式" tabindex="-1"><a class="header-anchor" href="#自动提交模式" aria-hidden="true">#</a> 自动提交模式</h3><p>默认模式，每执行一次写操作，就会自动提交一次事务。</p><p>此模式无法保证多数据一致性。</p><h3 id="手动提交模式" tabindex="-1"><a class="header-anchor" href="#手动提交模式" aria-hidden="true">#</a> 手动提交模式</h3><p>动手提交模式下，需要手动调用<code>commit</code>方法提交事务。或者调用<code>rollback</code>方法回滚事务。</p><p>手动提交模式下，可以保证多数据一致性。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  conn <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 关闭自动提交，开启事务</span>\n  conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into employee(eno, ename, salary, dname) values(?,?,?,?)&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">105</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;插入失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;员工&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;市场部&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 提交事务</span>\n  conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>conn<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 回滚事务</span>\n      conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="数据库查询方法" tabindex="-1"><a class="header-anchor" href="#数据库查询方法" aria-hidden="true">#</a> 数据库查询方法</h2><ul><li>分页：limit</li><li>时间日期处理</li><li>数据批处理</li></ul><h3 id="分页-limit" tabindex="-1"><a class="header-anchor" href="#分页-limit" aria-hidden="true">#</a> 分页：limit</h3><p>将数据转换成实体类对象保存。</p><h3 id="时间日期处理" tabindex="-1"><a class="header-anchor" href="#时间日期处理" aria-hidden="true">#</a> 时间日期处理</h3><p>JDBC 获取日期使用可以使用 java.sql.Date，它继承自 java.util.Date，可以相互兼容。</p><p>写入的时候，需要将输入的字符串转换成 java.sql.Date 类型，分为两步：</p><ol><li>将日期字符串转换成 java.util.Date 类型</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> strHiredate <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> udHiredata <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  udHiredata <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strHiredate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的日期格式有误，格式为：yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>将 java.util.Date 类型转换成 java.sql.Date 类型</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> time <span class="token operator">=</span> udHiredata<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> sdHiredate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数据批处理" tabindex="-1"><a class="header-anchor" href="#数据批处理" aria-hidden="true">#</a> 数据批处理</h3><ul><li>addBatch：将参数添加到批处理任务</li><li>executeBatch：执行批处理任务</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into employee(eno, ename, salary, dname) values(?,?,?,?,?)&quot;</span><span class="token punctuation">;</span>\npstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;员工&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;市场部&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将参数添加到批处理任务</span>\n  pstmt<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 执行批处理任务</span>\npstmt<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="连接池的使用" tabindex="-1"><a class="header-anchor" href="#连接池的使用" aria-hidden="true">#</a> 连接池的使用</h2><p>在实际开发中，不会直接使用 JDBC 连接数据库，而是使用连接池。在项目启动时，会创建一定数量的数据库连接，放入连接池中。当需要连接数据库时，直接从连接池中获取连接，使用完毕后，再将连接放回连接池中。</p><ul><li>阿里巴巴的 Druid 连接池</li><li>C3P0 连接池</li></ul><h3 id="druid-连接池" tabindex="-1"><a class="header-anchor" href="#druid-连接池" aria-hidden="true">#</a> Druid 连接池</h3><p>Druid 是阿里巴巴开发的一个开源的数据库连接池，它是目前最好的数据库连接池。</p><ol><li>加载属性文件，下载 Druid 的 jar 包，导入项目中，创建<code>druid-filter.properties</code>配置文件。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> propertyFile <span class="token operator">=</span> <span class="token class-name">DruidSample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;/druid-filter.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 空格会被转义成%20，需要URLDecoder解码，还原成空格</span>\n  propertyFile <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>propertyFile<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>propertyFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2"><li>获取 DataSource 数据源对象</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>创建数据库连接对象</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="常见错误" tabindex="-1"><a class="header-anchor" href="#常见错误" aria-hidden="true">#</a> 常见错误</h3><p>连接池最大上线为 20，当创建到第 21 个时，程序会卡死。</p><p>小技巧，在线上环境可以将最小和最大都设置为同一个值，程序一运行，就分配好所有资源，创建好所有连接，避免后面再重新创建连接。这样对程序管理和性能都有帮助。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>initialSize=20\nmaxActive=20\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',55),u={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[e,(0,p.Wm)("a",o,[c,(0,p.Wm)(a)])])]),l],64)}}}}]);