"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[5643],{3291:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2dd8b76b",path:"/web-developer/back-end/node/node-process.html",title:"Node 子进程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Child_process 模块",slug:"child-process-模块",children:[{level:3,title:"spawn()",slug:"spawn",children:[]},{level:3,title:"fork()",slug:"fork",children:[]}]},{level:2,title:"Cluster 模块",slug:"cluster-模块",children:[]},{level:2,title:"Worker Threads",slug:"worker-threads",children:[]},{level:2,title:"源码分析",slug:"源码分析",children:[]},{level:2,title:"Node 多进程开发",slug:"node-多进程开发",children:[{level:3,title:"进程",slug:"进程",children:[]},{level:3,title:"常用方法",slug:"常用方法",children:[]},{level:3,title:"进程之间通信",slug:"进程之间通信",children:[]}]}],filePathRelative:"web-developer/back-end/node/node-process.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:3}]}}},8952:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(6252);const t=(0,p.Wm)("h1",{id:"node-子进程",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#node-子进程","aria-hidden":"true"},"#"),(0,p.Uk)(" Node 子进程")],-1),e={href:"https://www.nodeapp.cn/child_process.html",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("参考文档"),o=(0,p.uE)('<p>Node.js 采用单线程模型，这意味着 Node.js 只有一个线程来处理所有的请求。</p><p>然而，有些任务需要耗费大量的 CPU 时间或 IO 操作，这些任务可能会阻塞事件循环，导致整个应用程序变得缓慢或无响应。为了解决这个问题，Node.js 引入了一些方法来实现多线程处理。为了解决这个问题，Node.js 提供了 Cluster 模块和 Child_process 模块。</p><h2 id="child-process-模块" tabindex="-1"><a class="header-anchor" href="#child-process-模块" aria-hidden="true">#</a> Child_process 模块</h2><p>我们在 Child_process 中创建的进程都是 Node.js 主进程下嵌套的子进程。</p><ul><li>查看启动的进程：<code>ps -ef|grep 84926</code></li></ul><p>Child_process 模块可以在 Node.js 中启动子进程，并且可以利用多核 CPU 来处理计算密集型任务。</p><p>常用异步行数：</p><ul><li><p>spawn()：启动一个子进程，适合耗时操作，创建了管道，流</p></li><li><p>fork()：启动一个新的 Node.js 进程</p></li><li><p>exec()：可以执行一个 shell 命令，适合开销比较小的任务，数据一次性返回</p></li><li><p>execFile()：可以执行一个可执行文件</p></li></ul><p>同步函数：</p><ul><li>execSync</li><li>execFileSync</li><li>spawnSync</li></ul><h3 id="spawn" tabindex="-1"><a class="header-anchor" href="#spawn" aria-hidden="true">#</a> spawn()</h3><p>spawn 函数主要用于执行那些不需要终端交互的命令，它接收一个命令字符串和一个参数数组，将这个命令转换为一个子进程来执行。因为它不需要创建新的 V8 实例，所以它的启动速度很快，而且在处理大量的小型任务时非常高效。</p><p><code>exec</code>和<code>execFile</code>底层实现都是使用<code>spawn</code>。</p><p>常见用法包括：</p><ul><li>运行外部耗时命令，列如，执行 git clone 或 npm install</li><li>处理大型数据集，将任务拆分成多个子进程，以避免内存问题</li><li>执行非常耗时的操作，而不会阻止事件循环</li></ul><p>子进程对象会有三个事件：</p><ul><li>stdout：可以通过监听该事件获取子进程输出的数据</li><li>stderr：可以通过监听该事件获取子进程输出的错误信息</li><li>close：可以通过监听该事件获取子进程的退出码</li></ul><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> fork()</h3><p>会启动一个 V8 引擎创建一个新的 Node.js 进程，并且在子进程中运行指定的模块文件。fork 函数返回一个 ChildProcess 对象，可以在父进程中使用该对象与子进程进行通信。</p><p>常见用法包括：</p><ul><li>处理 CPU 密集型任务：可以创建多个子进程，让它们分别运行相同或不同的模块文件，从而充分利用 CPU 资源</li><li>在父进程中监听端口，将请求转发给子进程处理，以实现负载均衡</li><li>启动多个子进程，并通过 IPC 共享状态，以提高程序的并发性能</li></ul><div class="custom-container tip"><p class="custom-container-title">spawn() 和 fork()</p><p>spawn 和 fork 的选择取决于使用场景和需求。一般来说，如果只需要启动一个独立的进程并与之通信，使用 spawn 即可；如果需要启动一个新的 Node.js 实例并与之共享状态和通信，使用 fork 更加方便。</p></div><h2 id="cluster-模块" tabindex="-1"><a class="header-anchor" href="#cluster-模块" aria-hidden="true">#</a> Cluster 模块</h2><p>Cluster 模块可以让 Node.js 在多个进程之间进行负载均衡，并且可以通过 IPC 机制实现进程之间的通信和状态共享。</p><p>Cluster 模块的使用场景通常是在需要处理高并发请求的场景下，比如 Web 应用程序、API 服务器等。</p><h2 id="worker-threads" tabindex="-1"><a class="header-anchor" href="#worker-threads" aria-hidden="true">#</a> Worker Threads</h2><p>它可以在 Node.js 中创建<strong>多个线程</strong>，并且可以通过共享内存来提高性能。</p><p>Cluster 适用于需要利用多核处理器的能力来提高应用程序的性能的场景，而 Worker Threads 则适用于在单个线程内并行执行 CPU 密集型任务的场景。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><ul><li>exec 和 execFile 有什么区别？</li><li>为什么 exec/execFile/fork 都是通过 spawn 实现？</li><li>为什么 spawn 没有回调方法，而 exec 和 execFile 却有？</li><li>spawn 中 stdout 和 stderr 到底是什么？</li><li>回调方法的执行顺序是怎样的？</li></ul><h2 id="node-多进程开发" tabindex="-1"><a class="header-anchor" href="#node-多进程开发" aria-hidden="true">#</a> Node 多进程开发</h2><p>核心用法是创建子进程：<code>child_process</code></p><h3 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h3><p>概念：</p><ul><li>进程是一个实体。每一个进程都有它自己的地址空间。</li><li>进程是一个<code>执行中的程序</code>，存在嵌套关系</li></ul><p>在<code>macOS</code>系统中运行一个 Node.js 程序，操作系统就会创建一个进程，在 Node.js 中创建一个子进程，就会存在嵌套关系。</p><p>我们在<code>cchild_process</code>中创建的进程就是 Node.js 的子进程。</p><h4 id="进程嵌套关系" tabindex="-1"><a class="header-anchor" href="#进程嵌套关系" aria-hidden="true">#</a> 进程嵌套关系</h4><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/进程嵌套关系.jpg" alt="image"></p><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><h4 id="exec-适合开销比较小的任务" tabindex="-1"><a class="header-anchor" href="#exec-适合开销比较小的任务" aria-hidden="true">#</a> exec 适合开销比较小的任务</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 执行shell命令</span>\ncp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;ls -al&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 执行shell文件，直接衍生为一个新进程</span>\ncp<span class="token punctuation">.</span><span class="token function">execFile</span><span class="token punctuation">(</span>\n  path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;test.shell&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;-al&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="spawn-适合耗时任务-需要不断日志-比如-npm-install" tabindex="-1"><a class="header-anchor" href="#spawn-适合耗时任务-需要不断日志-比如-npm-install" aria-hidden="true">#</a> spawn 适合耗时任务，需要不断日志，比如: <code>npm install</code></h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;test.shell&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-al&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-bl&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  pwd<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nchild<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchild<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>或者使用<code>stdio: inherit</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-e&#39;</span><span class="token punctuation">,</span> code<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  cwd<span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  stdio<span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nchild<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchild<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;命令执行失败：&#39;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;命令执行成功：&#39;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="fork-会使用-node-创建一个子进程来执行文件" tabindex="-1"><a class="header-anchor" href="#fork-会使用-node-创建一个子进程来执行文件" aria-hidden="true">#</a> fork 会使用 Node 创建一个子进程来执行文件</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;child.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="进程之间通信" tabindex="-1"><a class="header-anchor" href="#进程之间通信" aria-hidden="true">#</a> 进程之间通信</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// index.js</span>\n<span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;child.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchild<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  child<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断开连接</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// child.js 接收</span>\nprocess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',50),l={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",e,[c,(0,p.Wm)(a)])])]),o],64)}}}}]);