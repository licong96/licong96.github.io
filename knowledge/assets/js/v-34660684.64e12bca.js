"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[6803],{7133:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-34660684",path:"/web-developer/front-end/javascript/es6.html",title:"ES6",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"ECMAScript",slug:"ecmascript",children:[{level:3,title:"语言与平台之间的关系是什么？",slug:"语言与平台之间的关系是什么",children:[]},{level:3,title:"ES2015",slug:"es2015",children:[]},{level:3,title:"语法增强",slug:"语法增强",children:[]},{level:3,title:"异步编程",slug:"异步编程",children:[]},{level:3,title:"for...in 和 for...of",slug:"for-in-和-for-of",children:[]}]},{level:2,title:"Promise",slug:"promise",children:[{level:3,title:"Promise执行多个异步方法",slug:"promise执行多个异步方法",children:[]},{level:3,title:"Promise - catch 异常",slug:"promise-catch-异常",children:[]}]}],filePathRelative:"web-developer/front-end/javascript/es6.md",git:{updatedTime:1674894334e3,contributors:[{name:"黎聪",email:"licong23@xdf.cn",commits:2},{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},6689:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h1><h2 id="ecmascript" tabindex="-1"><a class="header-anchor" href="#ecmascript" aria-hidden="true">#</a> ECMAScript</h2><h3 id="语言与平台之间的关系是什么" tabindex="-1"><a class="header-anchor" href="#语言与平台之间的关系是什么" aria-hidden="true">#</a> 语言与平台之间的关系是什么？</h3><ul><li><p>JavaScript（web） = ECMAScript + Web APIs（BOM + DOM）</p></li><li><p>JavaScript（node） = ECMAScript + Node APIs（fs + net + etc.）</p></li></ul><h3 id="es2015" tabindex="-1"><a class="header-anchor" href="#es2015" aria-hidden="true">#</a> ES2015</h3><p>2015 年发布的 JS 第 6 个版本，也叫 ES6。</p><p>解决原有语法的不足。增强原有语法。</p><h3 id="语法增强" tabindex="-1"><a class="header-anchor" href="#语法增强" aria-hidden="true">#</a> 语法增强</h3><ul><li>let、const</li><li>解构，数组解构和对象解构</li><li>模板字符串，带标签的模板字符串</li><li>字符串扩展方法</li><li>函数参数默认值</li><li>扩展运算符（...），收集剩余数据，展开数据</li><li>箭头函数</li><li>对象扩展方法</li><li>proxy 和 defineProperty</li><li>Reflect 对象</li><li>Promise</li><li>class</li><li>Set 和 Map 数据结构</li><li>Symbol，为对象添加独一无二的属性名</li><li>for...of 遍历任意数据结构，需要有 iterator；对象可先使用 entries 方法转成数组。</li><li>Iterable 接口，迭代器 Symbol.iterator</li><li>迭代器接口，迭代器模式</li><li>Generator 函数与使用场景</li><li>ES Modules</li></ul><h3 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程" aria-hidden="true">#</a> 异步编程</h3><p>不要在<code>forEach</code>中使用异步。像并发，js 是单线程语言只有并发，短时间内执行很多任务。只有多线程或多进程的程序才有并行。</p><p>js 使用 EventLoop 机制，用宏任务和微任务实现并发。</p><h3 id="for-in-和-for-of" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of" aria-hidden="true">#</a> for...in 和 for...of</h3><ul><li><code>for...in</code>：es5 方法，使用在对象上，等同于<code>Object.keys()</code></li><li><code>for...of</code>：es6 方法使用在数组上</li></ul><p>如果再循环中有复杂的逻辑，建议将逻辑封装成一个函数。</p><p>如果里面有异步操作，建议使用<code>for...of</code>，代替<code>forEach</code>，因为<code>forEach</code>不会等待异步执行。</p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><h3 id="promise执行多个异步方法" tabindex="-1"><a class="header-anchor" href="#promise执行多个异步方法" aria-hidden="true">#</a> Promise执行多个异步方法</h3><p>使用这种方式，可以非常快捷方便的执行很多个异步方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">checkNodeVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">initArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  chain<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="promise-catch-异常" tabindex="-1"><a class="header-anchor" href="#promise-catch-异常" aria-hidden="true">#</a> Promise - catch 异常</h3><p>每一层异步处理都需要有一层<code>try catch</code>。</p><p>全局的<code>try catch</code>可以捕获全局调用栈中的异常，如果在异步里面嵌套<code>Promise</code>执行，需要在里面再做<code>catch</code>处理。</p>',23),t={render:function(n,a){return e}}}}]);