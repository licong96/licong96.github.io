"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[812],{4252:(e,l,d)=>{d.r(l),d.d(l,{data:()=>i});const i={key:"v-86876f26",path:"/computers/internet/browser/1.html",title:"渲染机制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 渲染树构建",slug:"_1-渲染树构建",children:[]}],filePathRelative:"computers/internet/browser/1.md",git:{updatedTime:1628585005e3,contributors:[{name:"黎聪",email:"licong23@xdf.cn",commits:1}]}}},4934:(e,l,d)=>{d.r(l),d.d(l,{default:()=>t});const i=(0,d(6252).uE)('<h1 id="渲染机制" tabindex="-1"><a class="header-anchor" href="#渲染机制" aria-hidden="true">#</a> 渲染机制</h1><ol><li>渲染树构建</li><li>布局</li><li>绘制</li></ol><h2 id="_1-渲染树构建" tabindex="-1"><a class="header-anchor" href="#_1-渲染树构建" aria-hidden="true">#</a> 1. 渲染树构建</h2><p>第一步是让浏览器将 <code>DOM</code> 和 <code>CSSOM</code> 合并成一个<code>渲染树</code>，网罗网页上所有可见的 DOM 内容，以及每个节点的所有 CSSOM 样式信息。</p><p>为构建渲染树，浏览器大体上完成了下列工作:</p><ol><li>从 <code>DOM</code> 树的根节点开始遍历每个可见节点。</li></ol><p>某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。 某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，上例中的 span 节点---不会出现在渲染树中，---因为有一个显式规则在该节点上设置了“display: none”属性。 对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们。</p><p>发射可见节点，连同其内容和计算的样式。</p><ul><li><code>DOM</code>树和<code>CSSOM</code>树合并后形成渲染树。</li><li>渲染树只包含渲染网页所需的节点。</li></ul>',9),t={render:function(e,l){return i}}}}]);