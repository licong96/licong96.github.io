"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[777],{2205:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-130fc7f0",path:"/web-developer/back-end/server/docker.html",title:"Docker",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概念",slug:"概念",children:[]},{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"使用",slug:"使用",children:[{level:3,title:"常用命令",slug:"常用命令",children:[]},{level:3,title:"image 镜像命令",slug:"image-镜像命令",children:[]},{level:3,title:"containers 容器命令",slug:"containers-容器命令",children:[]}]},{level:2,title:"nginx containers",slug:"nginx-containers",children:[{level:3,title:"-v 文件映射",slug:"v-文件映射",children:[]}]},{level:2,title:"Dockerfile",slug:"dockerfile",children:[{level:3,title:"docker build 构建",slug:"docker-build-构建",children:[]},{level:3,title:".dockerignore",slug:"dockerignore",children:[]}]},{level:2,title:"Docker Compose",slug:"docker-compose",children:[{level:3,title:"安装",slug:"安装-1",children:[]},{level:3,title:"配置文件",slug:"配置文件",children:[]},{level:3,title:"配置 Mysql 和 Mongodb",slug:"配置-mysql-和-mongodb",children:[]},{level:3,title:"命令",slug:"命令",children:[]},{level:3,title:"docker-compose 容器中的服务相互连接",slug:"docker-compose-容器中的服务相互连接",children:[]},{level:3,title:"宿主机连接 docker 中的 redis",slug:"宿主机连接-docker-中的-redis",children:[]},{level:3,title:"删除 none 镜像",slug:"删除-none-镜像",children:[]}]},{level:2,title:"遇到的问题",slug:"遇到的问题",children:[]}],filePathRelative:"web-developer/back-end/server/docker.md",git:{updatedTime:1683600236e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:3}]}}},601:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var e=a(6252);const p=(0,e.Wm)("h1",{id:"docker",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#docker","aria-hidden":"true"},"#"),(0,e.Uk)(" Docker")],-1),l={href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("文档"),o=(0,e.uE)('<p>理解：Docker 就是一种虚拟机技术，比传统虚拟机（有图像界面的那些比如 vmware、virtualbox）更加简单、轻量，更适合运行服务。</p><p>用途：可以把开发、测试环境，一键部署到任何一台机器上。</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><ul><li>Docker image 镜像</li><li>Docker containers 容器</li><li>Docker 仓库</li><li>Dockerfile</li><li>Docker Compose</li></ul><p><code>Docker image</code> 就是一个系统的镜像文件，类似于上学的时候我们用 U 盘重装系统，在里面先下载一个<code>.ios</code>的镜像文件，这个镜像文件可以安装出一个又一个的系统，这些系统就叫<code>Docker containers</code>。</p>',5),t=(0,e.Uk)("Docker 仓库里面存储了很多镜像文件，常用的仓库地址是"),r={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("https://hub.docker.com/"),u=(0,e.Uk)("，还可以上传自己的镜像文件。"),d=(0,e.uE)('<p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/B端/docker-概念图.jpg" alt="image"></p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>去官网下载，安装。</p><p>安装完记得镜像加速，搜索<code>docker镜像加速</code>，可以大幅度提高镜像下载速度。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><ul><li>验证 Docker 是否安装成功：<code>docker --version</code></li></ul><h3 id="image-镜像命令" tabindex="-1"><a class="header-anchor" href="#image-镜像命令" aria-hidden="true">#</a> image 镜像命令</h3><ul><li><p>下载镜像：<code>docker pull &lt;image-name&gt;:&lt;tag&gt;</code></p></li><li><p>查看所有镜像：<code>docker images</code></p></li><li><p>删除镜像：<code>docker rmi &lt;image id&gt;</code></p></li><li><p>上传镜像：<code>docker push &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;</code></p></li><li><p>遇到 none 的情况，运行删除：<code>docker image prune</code></p></li></ul><h3 id="containers-容器命令" tabindex="-1"><a class="header-anchor" href="#containers-容器命令" aria-hidden="true">#</a> containers 容器命令</h3><ul><li><p>启动容器：<code>docker run &lt;参数&gt;</code></p><ul><li><code>-p</code> 端口映射</li><li><code>-v</code> 数据卷，文件映射</li><li><code>-d</code> 后台运行</li><li><code>--name</code> 定义容器名称</li></ul></li><li><p>查看所有容器：<code>docker ps</code></p><ul><li>显示隐藏容器：<code>-a</code></li></ul></li><li><p>停止容器：<code>docker stop &lt;container id&gt;</code></p></li><li><p>删除容器：<code>docker rm &lt;container id&gt;</code></p></li><li><p>查看容器信息：<code>docker inspect &lt;container id&gt;</code></p></li><li><p>查看日志：<code>docker logs &lt;container id&gt;</code></p></li><li><p>进入控制台：<code>docker exec -it &lt;container id&gt; /bin/sh</code></p></li></ul><h2 id="nginx-containers" tabindex="-1"><a class="header-anchor" href="#nginx-containers" aria-hidden="true">#</a> nginx containers</h2><p>服务启动之后，默认指向容器中的<code>index.html</code>文件。</p><p>文件位置：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/usr/share/nginx/html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="v-文件映射" tabindex="-1"><a class="header-anchor" href="#v-文件映射" aria-hidden="true">#</a> -v 文件映射</h3><p>可以将 docker 中 nginx 容器变为一个本机服务，启动指定的项目。</p><p>参数<code>-v</code>，可以修改容器中 nginx 服务默认的<code>index.html</code>文件位置，修改为本机文件，启动后运行的是本机项目。</p><p>这样的好处是可以在任何系统中快速部署服务。</p><p>用法：本机电脑，安装 docker，启动 nginx 容器，配置运行本机文件。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker run -p 81:80 -d -v /Users/cass/Desktop/code/learning/docker/html:/usr/share/nginx/html --name nginx1 nginx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h2><p>一个配置文件，名叫<code>Dockerfile</code>，描述如何构建一个新的 image 镜像，必须放在根目录下面。</p><p>语法：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 设置基础镜像，基于当前某个镜像文件去创建一个新的镜像</span>\nFROM node<span class="token punctuation">:</span><span class="token number">16</span>\n\n<span class="token comment"># 设置工作目录，Docker将在此目录中执行后续指令</span>\nWORKDIR /app\n\n<span class="token comment"># 将当前目录（Dockerfile文件所在的目录）下所有文件拷贝到工作目录</span>\nCOPY . /app\n\n<span class="token comment"># 在镜像中执行命令，构建镜像时，做一些系统配置，安装必备的软件</span>\nRUN npm install\nRUN xxx\n\n<span class="token comment"># 设置容器启动时默认执行的命令，只能在Dockerfile中指定一个CMD指令</span>\n<span class="token comment"># 最后需要执行一个阻塞控制台的命令: npx pm2 log</span>\nCMD npm run dev &amp; npx pm2 log\n\n<span class="token comment"># 设置环境变量</span>\nENV NODE_ENV=production\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="docker-build-构建" tabindex="-1"><a class="header-anchor" href="#docker-build-构建" aria-hidden="true">#</a> docker build 构建</h3><p>构建出一个新的 docker image 镜像</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker build -t my-node-app:latest <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="dockerignore" tabindex="-1"><a class="header-anchor" href="#dockerignore" aria-hidden="true">#</a> .dockerignore</h3><p>使用 <code>.dockerignore</code> 文件排除不必要的文件。</p><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h2><p>通过一个配置文件，就可以让你的系统一键启动所有的运行环境：nodejs、mysql、mongodb、redis，并且将这些环境连接起来。</p><p>软件设计和开发有单一职责原则。Docker 每个容器只负责一个服务，如果开发环境有多个服务，就需要启动多个 Docker 容器，要将这些容器连接起来，就需要用到 Docker-compose。</p><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> 安装</h3>',34),m=(0,e.Uk)("最新版本文档地址："),k={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("https://github.com/docker/compose/releases"),h=(0,e.uE)('<p><strong>注意：版本 1 和版本 2 在命令使用上有些区别</strong></p><p>需要通过命令单独安装，安装命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> -L <span class="token string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>&quot;</span> -o /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>验证 Docker Compose 是否已成功安装：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker-compose --version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><ul><li>配置 Redis</li><li>配置 Mysql</li><li>配置 Mongodb</li></ul><p>在项目根目录中创建一个<code>docker-compose.yml</code>文件</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.9&#39;</span> <span class="token comment">#  Docker Compose 文件的版本</span>\n\n<span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token comment"># 定义了应用程序中的所有服务，每个服务都是一个独立的容器</span>\n  <span class="token key atrule">editor-server</span><span class="token punctuation">:</span> <span class="token comment"># service-name 服务名称</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> <span class="token comment"># 使用自定义的 Dockerfile 来构建服务的镜像</span>\n      <span class="token key atrule">context</span><span class="token punctuation">:</span> . <span class="token comment"># 指定构建上下文的目录，当前目录</span>\n      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile <span class="token comment"># 指定它的名称</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> editor<span class="token punctuation">-</span>server <span class="token comment"># 指定构建出来的镜像名称</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> editor<span class="token punctuation">-</span>server <span class="token comment"># 为服务容器指定一个自定义名称</span>\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 将容器的端口映射到宿主机的端口，您可以通过宿主机的 IP 地址和端口访问容器中的服务</span>\n      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">3000</span>\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 为服务设置环境变量</span>\n      <span class="token punctuation">-</span> MY_VARIABLE=value\n      <span class="token punctuation">-</span> TZ=Asia/Shanghai <span class="token comment"># 设置时区</span>\n    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 将服务连接到一个或多个网络</span>\n      <span class="token punctuation">-</span> mynetwork\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 将卷挂载到服务的容器，这可以用于在容器之间共享数</span>\n      <span class="token punctuation">-</span> myvolume<span class="token punctuation">:</span>/path/in/container\n    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./my-script.sh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 覆盖服务容器默认的启动命令</span>\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> <span class="token comment"># 定义服务之间的依赖关系，决定启动顺序，在editor-mysql之后启动</span>\n      <span class="token punctuation">-</span> editor<span class="token punctuation">-</span>mysql\n      <span class="token punctuation">-</span> editor<span class="token punctuation">-</span>mongo\n      <span class="token punctuation">-</span> editor<span class="token punctuation">-</span>redis\n  <span class="token key atrule">editor-redis</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> editor<span class="token punctuation">-</span>redis\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> 6378<span class="token punctuation">:</span><span class="token number">6379</span>\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> TZ=Asia/Shanghai\n  <span class="token key atrule">db</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> myuser\n      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> mypassword\n\n<span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 定义了应用程序中使用的卷。卷用于在容器之间共享数据或持久化数据</span>\n  <span class="token key atrule">db-data</span><span class="token punctuation">:</span>\n  <span class="token key atrule">app-data</span><span class="token punctuation">:</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="配置-mysql-和-mongodb" tabindex="-1"><a class="header-anchor" href="#配置-mysql-和-mongodb" aria-hidden="true">#</a> 配置 Mysql 和 Mongodb</h3><p>redis 无数据库，Mysql 和 Mongodb 需要创建数据库，需要数据持久化。会有更多配置。</p><p>Mongodb：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">editor-mongo</span><span class="token punctuation">:</span>\n  <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo\n  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> editor<span class="token punctuation">-</span>mongo\n  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment"># 报错后重启</span>\n  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">&#39;.docker-volumes/mongo/data:/data/db&#39;</span> <span class="token comment"># 数据持久化</span>\n  <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> MONGO_INITDB_DATABASE=imooc_lego_course\n    <span class="token comment"># - MONGO_INITDB_ROOT_USERNAME=root</span>\n    <span class="token comment"># - MONGO_INITDB_ROOT_PASSWORD=123456</span>\n    <span class="token punctuation">-</span> TZ=Asia/Shanghai <span class="token comment"># 设置时区</span>\n  <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token string">&#39;27016:27017&#39;</span> <span class="token comment"># 宿主机可以用 127.0.0.1:27016 即可连接容器中的数据库</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Mysql：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">editor-mysql</span><span class="token punctuation">:</span>\n  <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql <span class="token comment"># 引用官网 mysql 镜像</span>\n  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> editor<span class="token punctuation">-</span>mysql\n  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n  <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 高权限，执行下面的 mysql/init</span>\n  <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password <span class="token comment"># 解决无法远程访问的问题</span>\n  <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> 3305<span class="token punctuation">:</span><span class="token number">3306</span> <span class="token comment"># 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库</span>\n  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> .docker<span class="token punctuation">-</span>volumes/mysql/log<span class="token punctuation">:</span>/var/log/mysql <span class="token comment"># 记录日志</span>\n    <span class="token punctuation">-</span> .docker<span class="token punctuation">-</span>volumes/mysql/data<span class="token punctuation">:</span>/var/lib/mysql <span class="token comment"># 数据持久化</span>\n    <span class="token punctuation">-</span> ./mysql/init<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d/ <span class="token comment"># 初始化 sql</span>\n  <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> MYSQL_DATABASE=imooc_lego_course <span class="token comment"># 初始化容器时创建数据库</span>\n    <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456\n    <span class="token comment"># - MYSQL_USER=shuangyue #创建 test 用户</span>\n    <span class="token comment"># - MYSQL_PASSWORD=shuangyue #设置 test 用户的密码</span>\n    <span class="token punctuation">-</span> TZ=Asia/Shanghai <span class="token comment"># 设置时区</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>./mysql/init</code>初始化 sql，解除安全模式，让 root 用户可以通过外网访问数据库。</p><p>项目根目录下<code>.docker-volumes</code>文件夹非常重要，存储了很多数据库相关内容，不需要提交到 git，但是不要误删。</p><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h3><ul><li><p>构建容器：<code>docker-compose build &lt;service-name&gt;</code></p></li><li><p>启动所有服务：<code>docker-compose up -d</code></p></li><li><p>停止所有服务：<code>docker-compose down</code></p></li><li><p>查看服务：<code>docker-compose ps</code></p></li></ul><h3 id="docker-compose-容器中的服务相互连接" tabindex="-1"><a class="header-anchor" href="#docker-compose-容器中的服务相互连接" aria-hidden="true">#</a> docker-compose 容器中的服务相互连接</h3><p>修改 redis 配置，将<code>editor-server</code>连接到<code>editor-redis</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;editor-redis&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 连接docker-compose.yml 中配置的 editor-redis</span>\n  port<span class="token operator">:</span> <span class="token number">6379</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 修改mongodb连接配置</span>\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>devConf<span class="token punctuation">.</span>mongodbConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;editor-mongo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 修改mysql连接配置</span>\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>devConf<span class="token punctuation">.</span>mysqlConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;editor-mysql&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="宿主机连接-docker-中的-redis" tabindex="-1"><a class="header-anchor" href="#宿主机连接-docker-中的-redis" aria-hidden="true">#</a> 宿主机连接 docker 中的 redis</h3><p>使用 redis-cli 工具，连接到 docker-compose 中的 editor-redis 服务，向外暴露的端口号是 6378：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>redis-cli -h 127.0.0.1 -p 6378\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="删除-none-镜像" tabindex="-1"><a class="header-anchor" href="#删除-none-镜像" aria-hidden="true">#</a> 删除 none 镜像</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker image prune -a\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题" aria-hidden="true">#</a> 遇到的问题</h2><ul><li><p>使用 Sequelize 同步数据表失败，关闭同步功能即可</p></li><li><p>服务启动顺序问题导致 mysql 连接失败，添加 depends_on 解决</p></li></ul>',30),g={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",l,[c,(0,e.Wm)(a)])])]),o,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",r,[i,(0,e.Wm)(a)]),u]),d,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[m,(0,e.Wm)("a",k,[b,(0,e.Wm)(a)])])]),h],64)}}}}]);