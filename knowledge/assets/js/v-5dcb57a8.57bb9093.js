"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[5755],{3371:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5dcb57a8",path:"/web-developer/back-end/node/sequelize.html",title:"Sequelize",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概念",slug:"概念",children:[{level:3,title:"模型",slug:"模型",children:[]},{level:3,title:"模型查询",slug:"模型查询",children:[]},{level:3,title:"数据类型",slug:"数据类型",children:[]},{level:3,title:"列参数",slug:"列参数",children:[]}]},{level:2,title:"使用",slug:"使用",children:[{level:3,title:"安装使用",slug:"安装使用",children:[]},{level:3,title:"连接数据库和建模",slug:"连接数据库和建模",children:[]},{level:3,title:"创建记录",slug:"创建记录",children:[]},{level:3,title:"查询记录",slug:"查询记录",children:[]},{level:3,title:"连表查询",slug:"连表查询",children:[]},{level:3,title:"修改记录",slug:"修改记录",children:[]},{level:3,title:"删除记录",slug:"删除记录",children:[]}]},{level:2,title:"关联",slug:"关联",children:[{level:3,title:"将 fooId 列添加到 Bar 中",slug:"将-fooid-列添加到-bar-中",children:[]},{level:3,title:"自定义外键",slug:"自定义外键",children:[]}]},{level:2,title:"其它用法",slug:"其它用法",children:[{level:3,title:"attributes",slug:"attributes",children:[]}]}],filePathRelative:"web-developer/back-end/node/sequelize.md",git:{updatedTime:1678672401e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},9030:(n,s,a)=>{a.r(s),a.d(s,{default:()=>j});var p=a(6252);const e=(0,p.Wm)("h1",{id:"sequelize",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#sequelize","aria-hidden":"true"},"#"),(0,p.Uk)(" Sequelize")],-1),t={href:"https://www.sequelize.com.cn/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("官网文档地址"),c={href:"https://sequelize.org/v5/manual/data-types.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Datatypes 文档"),u=(0,p.uE)('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><h3 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h3><p>模型是 Sequelize 的本质. 模型是代表数据库中表的抽象。</p><p>模型也是 ES6 类. 类的实例表示该模型中的一个对象(该对象映射到数据库中表的一行)</p><p>几乎每个 Sequelize 方法都是异步的。</p><h3 id="模型查询" tabindex="-1"><a class="header-anchor" href="#模型查询" aria-hidden="true">#</a> 模型查询</h3><h4 id="使用嵌套数组来重命名属性" tabindex="-1"><a class="header-anchor" href="#使用嵌套数组来重命名属性" aria-hidden="true">#</a> 使用嵌套数组来重命名属性：</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Model<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  attributes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;qux&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>等同于：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> foo<span class="token punctuation">,</span> bar <span class="token keyword">AS</span> baz<span class="token punctuation">,</span> qux <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用-sequelize-fn-进行聚合" tabindex="-1"><a class="header-anchor" href="#使用-sequelize-fn-进行聚合" aria-hidden="true">#</a> 使用 sequelize.fn 进行聚合：</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Model.findAll({\n  attributes: [\n    &#39;foo&#39;,\n    [sequelize.fn(&#39;COUNT&#39;, sequelize.col(&#39;hats&#39;)), &#39;n_hats&#39;],\n    &#39;bar&#39;\n  ]\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>等同于:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> foo<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>hats<span class="token punctuation">)</span> <span class="token keyword">AS</span> n_hats<span class="token punctuation">,</span> bar <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用聚合函数时,必须为它提供一个别名,以便能够从模型中访问它。</p><p>也可以在<code>attributes</code>中搭配<code>include</code>或<code>exclude</code>使用。</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3>',17),r={href:"https://www.sequelize.com.cn/core-concepts/model-basics#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("数据类型文档地址"),k=(0,p.Wm)("h3",{id:"列参数",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#列参数","aria-hidden":"true"},"#"),(0,p.Uk)(" 列参数")],-1),b={href:"https://www.sequelize.com.cn/core-concepts/model-basics#%E5%88%97%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("列参数文档地址"),m=(0,p.Wm)("h4",{id:"where-子句",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#where-子句","aria-hidden":"true"},"#"),(0,p.Uk)(" WHERE 子句")],-1),g={href:"https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E5%BA%94%E7%94%A8-where-%E5%AD%90%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("where 语句操作符文档"),v={href:"https://www.sequelize.com.cn/core-concepts/model-querying-basics#%E6%93%8D%E4%BD%9C%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("Op 操作符文档"),w=(0,p.uE)('<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>ORM 工具，映射到数据库，像操作对象一样去操作数据库。团队中一般不会直接写 sql 去操作数据库，而是使用 ORM 工具。</p><ul><li>建模（外键） &amp; 同步到数据库</li><li>增删改查 &amp; 连表查询</li><li>数据表，用 JS 中的模型（class）代替</li><li>一条或多条记录，用 JS 中一个对象或数组代替</li><li>sql 语句，用对象方法代替</li></ul><h3 id="安装使用" tabindex="-1"><a class="header-anchor" href="#安装使用" aria-hidden="true">#</a> 安装使用</h3><p>安装 sequelize：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> sequelize\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装 mysql：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> mysql2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="连接数据库和建模" tabindex="-1"><a class="header-anchor" href="#连接数据库和建模" aria-hidden="true">#</a> 连接数据库和建模</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;sequelize&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&#39;case2-microblog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>\n  dialect<span class="token operator">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nseq\n  <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> force<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sync&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>建模：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建 User 模型，创建后的表名是users</span>\n<span class="token keyword">const</span> User <span class="token operator">=</span> seq<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// id 会自动创建，并设为主键、自增</span>\n  userName<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span> <span class="token comment">// varchar(255)</span>\n    allowNull<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不为空</span>\n    unique<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 唯一性</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n    allowNull<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  nickName<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n    comment<span class="token operator">:</span> <span class="token string">&#39;昵称&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 注释</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 会自动创建`createdAt`和`updatedAt`</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>外键关联：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Blog<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建外键 Blog.userId -&gt; User.id</span>\n  foreignKey<span class="token operator">:</span> <span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 另一种写法</span>\nUser<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Blog<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建外键 Blog.userId -&gt; User.id</span>\n  foreignKey<span class="token operator">:</span> <span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="创建记录" tabindex="-1"><a class="header-anchor" href="#创建记录" aria-hidden="true">#</a> 创建记录</h3><p>使用<code>create</code>创建一条记录：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  userName<span class="token operator">:</span> <span class="token string">&#39;licong&#39;</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>\n  nickName<span class="token operator">:</span> <span class="token string">&#39;阿聪&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用<code>bulkCreate</code>创建多条记录：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">bulkCreate</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      userName<span class="token operator">:</span> <span class="token string">&#39;licong&#39;</span><span class="token punctuation">,</span>\n      password<span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>\n      nickName<span class="token operator">:</span> <span class="token string">&#39;阿聪&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      userName<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>\n      password<span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>\n      nickName<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> returning<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// returning: true 返回结果信息</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="查询记录" tabindex="-1"><a class="header-anchor" href="#查询记录" aria-hidden="true">#</a> 查询记录</h3><ul><li>findOne</li><li>findAll</li><li>findAndCountAll</li></ul><h4 id="查询一条记录使用findone" tabindex="-1"><a class="header-anchor" href="#查询一条记录使用findone" aria-hidden="true">#</a> 查询一条记录使用<code>findOne</code>：</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> licong <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// attributes: [&#39;userName&#39;, &#39;nickName&#39;],\t// 查询特定的列</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    userName<span class="token operator">:</span> <span class="token string">&#39;licong&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>licong<span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="查询多条记录使用findall" tabindex="-1"><a class="header-anchor" href="#查询多条记录使用findall" aria-hidden="true">#</a> 查询多条记录使用<code>findAll</code>：</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> blogs <span class="token operator">=</span> <span class="token keyword">await</span> Blog<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  limit<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 限制本次查询 2 条</span>\n  offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 跳过 1 条</span>\n  order<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 排序</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blogs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blog</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> blog<span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="查询总数使用findandcountall" tabindex="-1"><a class="header-anchor" href="#查询总数使用findandcountall" aria-hidden="true">#</a> 查询总数使用<code>findAndCountAll</code>：</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> blogListAndCount <span class="token operator">=</span> <span class="token keyword">await</span> Blog<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  limit<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  order<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 排序</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blogListAndCount<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 返回所有总条数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blogListAndCount<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blog</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> blog<span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="setdatavalue-设置值" tabindex="-1"><a class="header-anchor" href="#setdatavalue-设置值" aria-hidden="true">#</a> setDataValue 设置值</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>instance<span class="token punctuation">.</span><span class="token function">setDataValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="getdatavalue-获取值" tabindex="-1"><a class="header-anchor" href="#getdatavalue-获取值" aria-hidden="true">#</a> getDataValue 获取值</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>instance<span class="token punctuation">.</span><span class="token function">getDataValue</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="连表查询" tabindex="-1"><a class="header-anchor" href="#连表查询" aria-hidden="true">#</a> 连表查询</h3><p>查 Blog 表包含上 User 表：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> blogListWithUser <span class="token operator">=</span> <span class="token keyword">await</span> Blog<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  order<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  include<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      model<span class="token operator">:</span> User<span class="token punctuation">,</span>\n      attributes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;userName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      where<span class="token operator">:</span> <span class="token punctuation">{</span>\n        userName<span class="token operator">:</span> <span class="token string">&#39;licong&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blogListWithUser<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  blogListWithUser<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blog</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> blogVal <span class="token operator">=</span> blog<span class="token punctuation">.</span>dataValues\n    blogVal<span class="token punctuation">.</span>user <span class="token operator">=</span> blogVal<span class="token punctuation">.</span>user<span class="token punctuation">.</span>dataValues\n    <span class="token keyword">return</span> blogVal\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// 要使用这种方式外键关联</span>\nBlog<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建外键 Blog.userId -&gt; User.id</span>\n  foreignKey<span class="token operator">:</span> <span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>查 User 表包含上 Blog 表：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> userListWithBlog <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  attributes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;userName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nickName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  include<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      model<span class="token operator">:</span> Blog<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  userListWithBlog<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> userVal <span class="token operator">=</span> user<span class="token punctuation">.</span>dataValues\n    <span class="token comment">// 每个用户有多条数据</span>\n    userVal<span class="token punctuation">.</span>blogs <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userVal<span class="token punctuation">.</span>blogs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blog</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> blog<span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> userVal\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// 要使用这种方式外键关联</span>\nUser<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Blog<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建外键 Blog.userId -&gt; User.id</span>\n  foreignKey<span class="token operator">:</span> <span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="模型-表-之间的关联关系" tabindex="-1"><a class="header-anchor" href="#模型-表-之间的关联关系" aria-hidden="true">#</a> 模型(表)之间的关联关系</h4><p>数据库中的表之间存在一定的关联关系，表之间的关系基于<code>主/外</code>键进行关联、创建约束等。关系表中的数据分为<code>1对1(1:1)</code>、<code>1对多(1:M)</code>、<code>多对多(N:M)</code>三种关联关系。</p><ul><li><code>hasOne</code>: 添加外键到目标模，与目标模型建立<code>1:1</code>关联关系，关联关系(外键)存在于<code>目标模型</code>中。</li><li><code>belongsTo</code>: 为当前模型添加外键，与目标模型建立<code>1:1</code>关联关系，关联关系(外键)存在于<code>源模型</code>中。</li><li><code>hasMany</code>: 添加外键到目标模型，与目标模型建立<code>1:N</code>关联关系，关联关系(外键)存在于<code>目标模型</code>中。</li><li><code>belongsToMany</code>: 与目标模型建立<code>N:M</code>关联关系，会创建交叉表。</li></ul><h3 id="修改记录" tabindex="-1"><a class="header-anchor" href="#修改记录" aria-hidden="true">#</a> 修改记录</h3><p>修改一条记录使用<code>update</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> updateRes <span class="token operator">=</span> <span class="token keyword">await</span> Blog<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;修改标题&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    where<span class="token operator">:</span> <span class="token punctuation">{</span>\n      id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updateRes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="删除记录" tabindex="-1"><a class="header-anchor" href="#删除记录" aria-hidden="true">#</a> 删除记录</h3><p>删除一条记录使用<code>destroy</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> destroyRes <span class="token operator">=</span> <span class="token keyword">await</span> Blog<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>destroyRes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="关联" tabindex="-1"><a class="header-anchor" href="#关联" aria-hidden="true">#</a> 关联</h2>',46),y={href:"https://www.sequelize.com.cn/core-concepts/assocs",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("关联文档"),q=(0,p.uE)('<p>Sequelize 提供了 四种 关联类型,并将它们组合起来以创建关联：</p><ul><li>HasOne 关联类型</li><li>BelongsTo 关联类型</li><li>HasMany 关联类型</li><li>BelongsToMany 关联类型</li></ul><p>关联的定义顺序是有关系的. 换句话说,对于这四种情况,定义顺序很重要. 在上述所有示例中,<code>A 称为 源 模型</code>,而 <code>B 称为 目标 模型</code>. 此术语很重要.</p><h3 id="将-fooid-列添加到-bar-中" tabindex="-1"><a class="header-anchor" href="#将-fooid-列添加到-bar-中" aria-hidden="true">#</a> 将 fooId 列添加到 Bar 中</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Foo<span class="token punctuation">.</span><span class="token function">hasOne</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span>\nBar<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>等同于：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token string">&quot;foos&quot;</span> <span class="token punctuation">(</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token string">&quot;bars&quot;</span> <span class="token punctuation">(</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token string">&quot;fooId&quot;</span> <span class="token keyword">INTEGER</span> <span class="token keyword">REFERENCES</span> <span class="token string">&quot;foos&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="自定义外键" tabindex="-1"><a class="header-anchor" href="#自定义外键" aria-hidden="true">#</a> 自定义外键</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 方法 1</span>\nFoo<span class="token punctuation">.</span><span class="token function">hasOne</span><span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  foreignKey<span class="token operator">:</span> <span class="token string">&#39;myFooId&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nBar<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>\n\n<span class="token comment">// 方法 2</span>\nFoo<span class="token punctuation">.</span><span class="token function">hasOne</span><span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  foreignKey<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;myFooId&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nBar<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="其它用法" tabindex="-1"><a class="header-anchor" href="#其它用法" aria-hidden="true">#</a> 其它用法</h2><h3 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> attributes</h3><p>返回指定字段：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  attributes: [&#39;id&#39;, &#39;name&#39;, &#39;code&#39;]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>排除指定字段：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  attributes: {\n    exclude: [&#39;createdAt&#39;, &#39;updatedAt&#39;, &#39;deletedAt&#39;]\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>有这两种用法就不需要再改写全局<code>Model.prototype.toJSON</code>，但是两者不可同时使用。</p>',16),j={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[(0,p.Wm)("a",t,[o,(0,p.Wm)(a)])]),(0,p.Wm)("p",null,[(0,p.Wm)("a",c,[l,(0,p.Wm)(a)])]),u,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",r,[i,(0,p.Wm)(a)])])]),k,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",b,[d,(0,p.Wm)(a)])])]),m,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",g,[h,(0,p.Wm)(a)])])]),(0,p.Wm)("li",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",v,[f,(0,p.Wm)(a)])])])]),w,(0,p.Wm)("p",null,[(0,p.Wm)("a",y,[x,(0,p.Wm)(a)])]),q],64)}}}}]);