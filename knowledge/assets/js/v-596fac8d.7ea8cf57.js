"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[4932],{1209:(e,a,l)=>{l.r(a),l.d(a,{data:()=>i});const i={key:"v-596fac8d",path:"/web-developer/back-end/java/1.basics.html",title:"基础知识",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"概念",slug:"概念",children:[]},{level:3,title:"JDK",slug:"jdk",children:[]},{level:2,title:"工具",slug:"工具",children:[{level:3,title:"类型转换",slug:"类型转换",children:[]},{level:3,title:"数据类型",slug:"数据类型",children:[]}]},{level:2,title:"反射",slug:"反射",children:[{level:3,title:"反射的核心类",slug:"反射的核心类",children:[]}]},{level:2,title:"Lambda 表达式",slug:"lambda-表达式",children:[{level:3,title:"语法",slug:"语法",children:[]},{level:3,title:"函数式编程",slug:"函数式编程",children:[]},{level:3,title:"Java 函数式接口",slug:"java-函数式接口",children:[]},{level:3,title:"添加注解",slug:"添加注解",children:[]}]},{level:2,title:"Stream 流式处理",slug:"stream-流式处理",children:[{level:3,title:"特点",slug:"特点",children:[]},{level:3,title:"流的操作",slug:"流的操作",children:[]}]}],filePathRelative:"web-developer/back-end/java/1.basics.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong23@xdf.cn",email:"licong23@xdf.cn",commits:1},{name:"licong96",email:"licong19961204@gmail.com",commits:1},{name:"黎聪",email:"licong23@xdf.cn",commits:1}]}}},9403:(e,a,l)=>{l.r(a),l.d(a,{default:()=>o});var i=l(6252);const r=(0,i.uE)('<h1 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h1><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p><strong>JDK</strong></p><p><strong>JRE</strong></p><p><strong>JVM</strong></p><ul><li>先编译，再执行。先用<code>javac</code>编译<code>.java</code>文件成<code>.class</code>文件，再用<code>java</code>执行。</li></ul><h3 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h3><p>环境搭建，下载，安装。</p>',8),d={href:"https://www.oracle.com/java/technologies/downloads/#java8",target:"_blank",rel:"noopener noreferrer"},n=(0,i.Uk)("下载地址"),t=(0,i.uE)('<p><strong>安装的时候遇到问题：</strong></p><p>点击下一步没有反应，然后在某处看到是百度输入法的问题，试试把百度输入法切换到系统输入法就好了。</p><p><strong>配置环境变量：</strong></p><blockquote><p>问题：java 不是内部或外部命令，也不是可运行的程序</p></blockquote><p>window10 路径：控制面板 -&gt; 系统 -&gt; 高级系统设置 -&gt; 环境变量</p><p>在系统变量中，新建：</p><ul><li>变量名：<code>JAVA_HOME</code></li><li>变量值：<code>C:\\Program Files\\Java\\jdk1.8.0_321</code>安装目录</li></ul><p>再到变量名<code>Path</code>中，新建：</p><ul><li><code>%JAVA_HOME%\\bin</code></li><li><code>%JAVA_HOME%\\jre\\bin</code></li></ul><h4 id="java-平台" tabindex="-1"><a class="header-anchor" href="#java-平台" aria-hidden="true">#</a> Java 平台</h4><ul><li>Java SE: 桌面程序</li><li>Java EE: web 程序</li><li>Java ME：移动程序</li></ul><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h2><ul><li>开发工具: <code>eclipse</code></li></ul><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3>',14),s={href:"http://www.lcong.cn/assets/images/knowledge/computers/java/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.jpg",target:"_blank",rel:"noopener noreferrer"},c=(0,i.Uk)("!image"),h=(0,i.uE)('<h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h4><ul><li><p>整数类型：byte，short，int，long</p></li><li><p>浮点数类型：float，double</p></li><li><p>字符类型：char</p></li><li><p>布尔类型：boolean</p></li></ul><h4 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h4><ul><li>所有 class 和 interface 类型，除了上述基本类型其它都是引用类型</li></ul><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><p>在程序<strong>运行时</strong>动态创建对象，动态调用方法，动态修改属性。</p><p>大多数 Java 框架都是基于反射实现参数配置、动态注入等特性。</p><h3 id="反射的核心类" tabindex="-1"><a class="header-anchor" href="#反射的核心类" aria-hidden="true">#</a> 反射的核心类</h3><ul><li><code>Class</code>：类的对象</li><li><code>Constructor</code>：类的构造方法</li><li><code>Method</code>：类的方法</li><li><code>Field</code>：类的成员变量</li></ul><h4 id="class-核心方法" tabindex="-1"><a class="header-anchor" href="#class-核心方法" aria-hidden="true">#</a> Class 核心方法</h4><ul><li>Class.forName(&quot;类名&quot;)：返回类的对象</li><li>Class.newInstance()：返回类的实例</li><li>Class.getConstructors()：返回类的所有构造方法</li><li>Class.getMethods()：返回类的所有 public 修饰方法</li><li>Class.getFields()：返回类的所有 public 修饰成员变量</li></ul><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> Lambda 表达式</h2><p>JDK8 开始支持，用来让代码更简洁，更易读。更简洁的实现匿名内部类与函数声明与调用。</p><p>约束条件：Lambda 表达式只能用来实现函数式接口。</p><p>函数式接口：只有一个抽象方法的接口。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>参数列表 -&gt; 方法体</p><ul><li>参数列表：参数类型可以省略，如果只有一个参数，小括号可以省略</li><li>方法体：如果只有一条语句，大括号可以省略，如果有返回值，return 也可以省略</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h3><p>函数式编程是基于 lambda 表达式的编程方式。</p><p>函数式编程理念是将代码作为可重用数据带入到程序运行中。非常灵活，非常轻松。</p><ul><li>函数式接口：只有一个抽象方法的接口</li><li>函数式编程：基于 lambda 表达式的编程方式</li></ul><h3 id="java-函数式接口" tabindex="-1"><a class="header-anchor" href="#java-函数式接口" aria-hidden="true">#</a> Java 函数式接口</h3><p>常用接口：</p><ul><li>Predicate：有参数，返回 boolean</li><li>Function：有参数，有返回值</li><li>Consumer：有参数，无返回值</li><li>Supplier：无参数，有返回值</li></ul><h3 id="添加注解" tabindex="-1"><a class="header-anchor" href="#添加注解" aria-hidden="true">#</a> 添加注解</h3><ul><li><code>@FunctionalInterface</code>：标记函数式接口</li></ul><p>通知编译器这是函数是接口，如果接口中有多个抽象方法，编译器会报错。</p><h2 id="stream-流式处理" tabindex="-1"><a class="header-anchor" href="#stream-流式处理" aria-hidden="true">#</a> Stream 流式处理</h2><p>是建立在 Lambda 表达式基础上的一种数据处理方式。</p><p>对集合数据处理进行高度抽象，让我们用一种声明式的方式来处理数据，极大简化代码量，实现对集合的快速处理，迭代、去重、筛选、排序、聚合等一系列处理。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>不是数据结构，不会保存数据</li><li>不会改变源对象，会返回一个持有结果的新 Stream</li><li>惰性求值，只有终止操作的时候才会执行</li></ul><h3 id="流的操作" tabindex="-1"><a class="header-anchor" href="#流的操作" aria-hidden="true">#</a> 流的操作</h3><ul><li>创建流</li><li>中间操作</li><li>终止操作</li></ul><h4 id="创建流" tabindex="-1"><a class="header-anchor" href="#创建流" aria-hidden="true">#</a> 创建流</h4><ul><li>通过 Stream.of() 创建流</li><li>通过集合创建流：<code>stream()</code></li><li>通过数组创建流：<code>Arrays.stream()</code></li><li>创建无限流：<code>Stream.iterate()</code>，<code>Stream.generate()</code></li></ul><h4 id="中间操作" tabindex="-1"><a class="header-anchor" href="#中间操作" aria-hidden="true">#</a> 中间操作</h4><ul><li>forEach：遍历</li><li>filter：过滤</li><li>limit：限制</li><li>map：映射</li><li>flatMap：扁平化</li><li>skip：跳过</li><li>sorted：排序</li><li>distinct：去重</li><li>count：计数</li><li>collect：收集</li></ul><h4 id="终止操作" tabindex="-1"><a class="header-anchor" href="#终止操作" aria-hidden="true">#</a> 终止操作</h4><ul><li>allMatch：所有元素都匹配</li><li>anyMatch：任意一个元素匹配</li><li>noneMatch：所有元素都不匹配</li><li>findFirst：返回第一个元素</li><li>findAny：返回任意一个元素</li><li>max：返回最大值</li><li>min：返回最小值</li><li>reduce：规约</li><li>forEachOrdered：有序遍历</li></ul>',43),o={render:function(e,a){const l=(0,i.up)("OutboundLink");return(0,i.wg)(),(0,i.j4)(i.HY,null,[r,(0,i.Wm)("ul",null,[(0,i.Wm)("li",null,[(0,i.Wm)("a",d,[n,(0,i.Wm)(l)])])]),t,(0,i.Wm)("p",null,[(0,i.Wm)("a",s,[c,(0,i.Wm)(l)])]),h],64)}}}}]);