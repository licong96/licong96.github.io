"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[3548],{4910:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-7930b95f",path:"/web-developer/front-end/frame/router.html",title:"前端路由",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"vue-router 常见问题",slug:"vue-router-常见问题",children:[{level:3,title:"vue-router 路由模式",slug:"vue-router-路由模式",children:[]},{level:3,title:"vue-router初始化流程",slug:"vue-router初始化流程",children:[]},{level:3,title:"H5 history",slug:"h5-history",children:[]}]}],filePathRelative:"web-developer/front-end/frame/router.md",git:{updatedTime:1674894334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:1}]}}},5752:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="前端路由" tabindex="-1"><a class="header-anchor" href="#前端路由" aria-hidden="true">#</a> 前端路由</h1><h2 id="vue-router-常见问题" tabindex="-1"><a class="header-anchor" href="#vue-router-常见问题" aria-hidden="true">#</a> vue-router 常见问题</h2><ol><li>history 和 hash 模式的区别是什么？(涉及 vue-router 路由模式和前端发布原理)</li><li>Vue dev 模式下为什么不需要配置 history fallback（涉及webpack-dev-serve配置）</li><li>没有定义<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>为什么代码里面能直接使用？(涉及vue-router初始化流程和vue插件)</li><li>浏览器如何实现URL变化但页面不刷新？（涉及H5 history）</li></ol><h3 id="vue-router-路由模式" tabindex="-1"><a class="header-anchor" href="#vue-router-路由模式" aria-hidden="true">#</a> vue-router 路由模式</h3><p><strong>问：1. history 和 hash 模式的区别是什么？</strong></p><p>答：</p><ol><li>语法结构不同</li><li>部署方式不同</li><li>SEO 不同</li></ol><p>history 模式会发送请求去加载资源，而 hash 模式则不会向服务器发送请求，所以服务端不需要做任何特殊处理。这也导致前端部署方式发生不同。</p><p>在线上实际部署用的都是 history 模式，但是需要配置静态资源服务器。</p><p>你需要做的就是在你的服务器上添加一个简单的回退路由。如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 index.html 相同的页面，由前端代码接管路由。</p><h4 id="createwebhistory" tabindex="-1"><a class="header-anchor" href="#createwebhistory" aria-hidden="true">#</a> createWebHistory</h4><p>记得要传入文件夹名称<code>/h5</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/h5&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>vue.config</code>配置文件中也要加入文件夹名称：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  publicPath<span class="token operator">:</span> <span class="token string">&#39;/h5&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2. Vue dev 模式下为什么不需要配置 history fallback</strong></p><p>因为 vue-cli 中有<code>WebpackDevServer</code>配置，会将路径转到<code>index.html</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genHistoryApiFallbackRewrites</span><span class="token punctuation">(</span><span class="token parameter">baseUrl<span class="token punctuation">,</span> pages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> from<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> to<span class="token operator">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="vue-router初始化流程" tabindex="-1"><a class="header-anchor" href="#vue-router初始化流程" aria-hidden="true">#</a> vue-router初始化流程</h3><p><strong>3. 没有定义<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>为什么代码里面能直接使用？</strong></p><p>因为<code>main.js</code>中调用了<code>app.use(router)</code>，router会执行install方法，里面执行<code>app.component(&#39;RouterLink&#39;)</code></p><h3 id="h5-history" tabindex="-1"><a class="header-anchor" href="#h5-history" aria-hidden="true">#</a> H5 history</h3><p>往历史记录堆栈顶部添加一条记录，仅修改了地址栏显示，不会触发页面刷新：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nhistory<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>响应pushState或replaceState的调用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onpopstate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>hash模式--方法location.hash和hashchange()</p>',27),t={render:function(n,a){return e}}}}]);