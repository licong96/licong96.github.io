"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[8375],{1793:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-16d3a038",path:"/web-developer/front-end/architect/section-2.html",title:"阶段二：B 端项目分析和设计",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"第 7 周 B 端项目需求分析和架构设计",slug:"第-7-周-b-端项目需求分析和架构设计",children:[{level:3,title:"组件的属性应该怎么设计？",slug:"组件的属性应该怎么设计",children:[]},{level:3,title:"编辑器的难题",slug:"编辑器的难题",children:[]},{level:3,title:"编辑器右侧表单渲染",slug:"编辑器右侧表单渲染",children:[]},{level:3,title:"总体技术选型",slug:"总体技术选型",children:[]}]},{level:2,title:"第 8 周 前端基础技术回顾",slug:"第-8-周-前端基础技术回顾",children:[{level:3,title:"Typescript",slug:"typescript",children:[]},{level:3,title:"Vue3",slug:"vue3",children:[]}]},{level:2,title:"第 9 周 项目整体搭建",slug:"第-9-周-项目整体搭建",children:[{level:3,title:"前端工具链",slug:"前端工具链",children:[]},{level:3,title:"使用 imooc-cli 新建项目",slug:"使用-imooc-cli-新建项目",children:[]},{level:3,title:"ESLint",slug:"eslint",children:[]},{level:3,title:"项目结构规范",slug:"项目结构规范",children:[]}]},{level:2,title:"第 10 周",slug:"第-10-周",children:[]}],filePathRelative:"web-developer/front-end/architect/section-2.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:4}]}}},5297:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var p=a(6252);const e=(0,p.uE)('<h1 id="阶段二-b-端项目分析和设计" tabindex="-1"><a class="header-anchor" href="#阶段二-b-端项目分析和设计" aria-hidden="true">#</a> 阶段二：B 端项目分析和设计</h1><h2 id="第-7-周-b-端项目需求分析和架构设计" tabindex="-1"><a class="header-anchor" href="#第-7-周-b-端项目需求分析和架构设计" aria-hidden="true">#</a> 第 7 周 B 端项目需求分析和架构设计</h2><p>分析需求，找出技术难点，攻克难点制定方案，编写伪代码，绘制流程图，整理成写文档，给后面的开发提供思路指导。</p><h3 id="组件的属性应该怎么设计" tabindex="-1"><a class="header-anchor" href="#组件的属性应该怎么设计" aria-hidden="true">#</a> 组件的属性应该怎么设计？</h3><p>伪代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 方案一，将css作为一个统一的对象传入</span>\n<span class="token operator">&lt;</span>LText css<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">&#39;#fff&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span> text<span class="token operator">=</span><span class="token string">&quot;文字内容&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// 组件内部实现比较简单，但是保存的时候多一层结构，并且在更新的时候也麻烦</span>\n<span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>css<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n\n<span class="token comment">// 方案二，将所有属性平铺传入</span>\n<span class="token operator">&lt;</span>LText text<span class="token operator">=</span><span class="token string">&quot;文字内容&quot;</span> color<span class="token operator">=</span><span class="token string">&quot;#fff&quot;</span> <span class="token operator">...</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>LText<span class="token operator">&gt;</span>\n\n<span class="token comment">// 内部实现会复杂一点，需要区分属性和内容，但是保存简单，更新数据不需要再做辨别</span>\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">stylePick</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n<span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>选择第方案二更简单。</p><h3 id="编辑器的难题" tabindex="-1"><a class="header-anchor" href="#编辑器的难题" aria-hidden="true">#</a> 编辑器的难题</h3><p>左侧画布是固定模板可以点击添加到中间，中间画布可编辑，右侧画布可使用表单编辑。</p><p>中间画布内容是一个数组，每一个元素都是一个组件，都是自己的属性，所有的新增、删除、编辑都是在操作这个数组中的数据。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 编辑器的状态</span>\n<span class="token keyword">interface</span> <span class="token class-name">EditorStore</span> <span class="token punctuation">{</span>\n  components<span class="token operator">:</span> ComponentData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 所有组件的数据</span>\n  currentElement<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 当前选中的组件</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 组件数据结构</span>\n<span class="token keyword">interface</span> <span class="token class-name">ComponentData</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 所有属性的混合体</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 将组件数据渲染到画布中，循环渲染components</span>\n<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;l-text&#39;</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;文本&#39;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;#fff&#39;</span><span class="token punctuation">,</span> fontSize<span class="token operator">:</span> <span class="token string">&#39;14px&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\ncomponents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>component <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>component<span class="token punctuation">.</span>name <span class="token punctuation">{</span><span class="token operator">...</span>component<span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 点击左侧模板，添加到中间画布，就是往components中push一条数据</span>\ncomponents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 删除中间画布中的组件，也是操作components，过滤掉要删除的组件</span>\ncomponents<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>component <span class="token operator">=&gt;</span> component<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>\n\n<span class="token comment">// 左侧模板渲染，也是渲染一套相似结构的模板数据，可以在管理后台单独维护，渲染的时候可以在外面再包裹一层，添加点击事件</span>\n<span class="token keyword">const</span> templateComponents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\ntemplateComponents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>component <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Wrapper <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>component<span class="token punctuation">.</span>name <span class="token punctuation">{</span><span class="token operator">...</span>component<span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Wrapper<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="编辑器右侧表单渲染" tabindex="-1"><a class="header-anchor" href="#编辑器右侧表单渲染" aria-hidden="true">#</a> 编辑器右侧表单渲染</h3><p>界面是数据的反应，将复杂的界面用数据来描述。</p><p>表单数据结构</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 组件数据</span>\n<span class="token keyword">const</span> textComponentProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;文本&#39;</span><span class="token punctuation">,</span>\n  fontFamily<span class="token operator">:</span> <span class="token string">&#39;HeiTi&#39;</span><span class="token punctuation">,</span>\n  color<span class="token operator">:</span> <span class="token string">&#39;#fff&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 对应的表单组件数据，可扩展性高，能二次开发</span>\n<span class="token keyword">const</span> propsMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token punctuation">{</span>\n    component<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 使用 input 组件来渲染</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  fontFamily<span class="token operator">:</span> <span class="token punctuation">{</span>\n    component<span class="token operator">:</span> <span class="token string">&#39;dropdown&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  color<span class="token operator">:</span> <span class="token punctuation">{</span>\n    component<span class="token operator">:</span> <span class="token string">&#39;color-picker&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 渲染出对应的组件</span>\n<span class="token function">map</span><span class="token punctuation">(</span>textComponentProps<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 添加事件，更新数据</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">propKey<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> updatedComponent <span class="token operator">=</span> store<span class="token punctuation">.</span>components<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>\n    updatedComponent<span class="token punctuation">.</span>props<span class="token punctuation">[</span>propKey<span class="token punctuation">]</span> <span class="token operator">=</span> newValue\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 渲染表单</span>\n  <span class="token operator">&lt;</span>propsMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>component value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> @change<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>流程图： <img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/B端/编辑器难题-自动更新.jpg" alt="image"></p>',16),t={href:"https://github.com/alibaba/x-render",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("扩展学习 x-render 同样使用数据渲染表单"),l=(0,p.uE)('<h3 id="总体技术选型" tabindex="-1"><a class="header-anchor" href="#总体技术选型" aria-hidden="true">#</a> 总体技术选型</h3><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/architect/B端/总体架构.jpg" alt="image"></p><h2 id="第-8-周-前端基础技术回顾" tabindex="-1"><a class="header-anchor" href="#第-8-周-前端基础技术回顾" aria-hidden="true">#</a> 第 8 周 前端基础技术回顾</h2><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> Typescript</h3><ol><li>为什么使用</li><li>基础知识点</li><li>interface</li><li>泛型（难点）</li><li>高级特性</li><li>定义文件</li></ol><p><code>type inference</code>（类型自动推论），在没有明确指定类型的时候，ts 会自动推论出一个类型。</p><p>类型自动推论无法进入函数里面，所以需要使用到泛型。泛型使用<code>&lt;&gt;</code>表示，定义一个或多个特殊的变量，在函数中传递，调用函数的时候再传递具体的类型。</p><h3 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h3><ol><li>为什么</li><li>基础知识点</li><li>响应式对象基本原理的解析</li><li>副作用</li><li>自定义 Hooks</li></ol><h2 id="第-9-周-项目整体搭建" tabindex="-1"><a class="header-anchor" href="#第-9-周-项目整体搭建" aria-hidden="true">#</a> 第 9 周 项目整体搭建</h2><h3 id="前端工具链" tabindex="-1"><a class="header-anchor" href="#前端工具链" aria-hidden="true">#</a> 前端工具链</h3><ul><li><p>静态类型语言：typescript、flow</p></li><li><p>代码风格检查：eslint</p></li><li><p>包管理器：npm、yarn</p></li><li><p>转译器：babel</p></li><li><p>开发服务器：webpack-dev-server、live reload、HMR</p></li><li><p>打包工具：webpack、rollup</p></li><li><p>任务管理工具：webpack、gulp</p></li></ul><p><strong>用脚手架将工具链聚合在一个工具内，简单，快熟，零配置。</strong></p><h3 id="使用-imooc-cli-新建项目" tabindex="-1"><a class="header-anchor" href="#使用-imooc-cli-新建项目" aria-hidden="true">#</a> 使用 imooc-cli 新建项目</h3><p><code>shims-vue.d.ts</code>是<code>.vue</code>文件的类型定义。如果没有 TS 会报错<code>Cannot find module &#39;./App.vue&#39; or its corresponding type declarations.</code></p><h4 id="vue-cli-和-vite-对比" tabindex="-1"><a class="header-anchor" href="#vue-cli-和-vite-对比" aria-hidden="true">#</a> Vue CLI 和 Vite 对比</h4><p>在开发环境，Vite 速度快 10 - 100 倍，它舍弃了兼容性要求，目前在测试阶段，要求第三方库都需要支持 ES modules，开发环境和打包上线是不同的代码，可能运行不太一样。</p><p>Vite 适合学习，测试项目，不太适合正式项目，不太适合需要做浏览器兼容的项目。</p><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h3><blockquote><p>是一个开源的 JavaScript 的 linting 工具，使用 espree 将 JavaScript 代码解析成抽象的语法树（AST）。</p></blockquote><ul><li>编辑器内也安装 ESLint 插件</li></ul><h3 id="项目结构规范" tabindex="-1"><a class="header-anchor" href="#项目结构规范" aria-hidden="true">#</a> 项目结构规范</h3><ul><li>不要嵌套太多</li><li>不要过度思考，开始阶段花费时间不要超过 5 分钟</li></ul><h2 id="第-10-周" tabindex="-1"><a class="header-anchor" href="#第-10-周" aria-hidden="true">#</a> 第 10 周</h2><ul><li>完成第一个业务组件 <code>LText</code> 的编写</li><li>完成业务组件属性和表单组件的显示和实时更新</li><li>代码升级：支持 <code>vNode</code> 在 <code>vue template</code> 中的展示</li></ul>',25),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",t,[o,(0,p.Wm)(a)])])]),l],64)}}}}]);