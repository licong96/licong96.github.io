"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[5527],{5622:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7b814bba",path:"/web-developer/back-end/practice/case3-old-island.html",title:"案例-Koa2+MySQL 开发旧岛项目",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"技术点",slug:"技术点",children:[{level:3,title:"工具包",slug:"工具包",children:[]},{level:3,title:"面向对象的服务端思维",slug:"面向对象的服务端思维",children:[]},{level:3,title:"知识点串讲",slug:"知识点串讲",children:[]},{level:3,title:"中间层",slug:"中间层",children:[]},{level:3,title:"获取 api 参数",slug:"获取-api-参数",children:[]},{level:3,title:"校验 api 参数",slug:"校验-api-参数",children:[]},{level:3,title:"异常处理",slug:"异常处理",children:[]},{level:3,title:"Sequelize 操作数据库",slug:"sequelize-操作数据库",children:[]},{level:3,title:"用户登录 token",slug:"用户登录-token",children:[]},{level:3,title:"权限问题",slug:"权限问题",children:[]}]},{level:2,title:"微信小程序登录",slug:"微信小程序登录",children:[{level:3,title:"无感知刷新 token",slug:"无感知刷新-token",children:[]},{level:3,title:"双令牌保证无感知登录",slug:"双令牌保证无感知登录",children:[]}]},{level:2,title:"数据库设计",slug:"数据库设计",children:[]},{level:2,title:"业务开发",slug:"业务开发",children:[{level:3,title:"数据库事务",slug:"数据库事务",children:[]},{level:3,title:"软删除",slug:"软删除",children:[]},{level:3,title:"sequelize[Op.*]语句",slug:"sequelize-op-语句",children:[]},{level:3,title:"避免循环查询数据库",slug:"避免循环查询数据库",children:[]},{level:3,title:"小心模块循环导入",slug:"小心模块循环导入",children:[]},{level:3,title:"util.format 格式化字符串",slug:"util-format-格式化字符串",children:[]},{level:3,title:"将返回的 JSON 数据序列化",slug:"将返回的-json-数据序列化",children:[]},{level:3,title:"处理静态资源的访问",slug:"处理静态资源的访问",children:[]}]},{level:2,title:"服务端部署",slug:"服务端部署",children:[{level:3,title:"常规进程与守护进程",slug:"常规进程与守护进程",children:[]}]},{level:2,title:"CMS 架构思想",slug:"cms-架构思想",children:[]}],filePathRelative:"web-developer/back-end/practice/case3-old-island.md",git:{updatedTime:1690944334e3,contributors:[{name:"licong96",email:"licong19961204@gmail.com",commits:2}]}}},4945:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(6252);const t=(0,p.Wm)("h1",{id:"案例-koa2-mysql-开发旧岛项目",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#案例-koa2-mysql-开发旧岛项目","aria-hidden":"true"},"#"),(0,p.Uk)(" 案例-Koa2+MySQL 开发旧岛项目")],-1),e=(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,"L160 - Node.js+Koa2+MySQL 打造前后端分离精品项目《旧岛》")],-1),o={href:"https://hzxdf-hr.oss-cn-hangzhou.aliyuncs.com/nb_bonus/2022-04-18/6afc1cc02a7b4dca826d53a141b4f62e.jpg",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("目录大纲"),l=(0,p.uE)('<p>开发过程：搭建基础框架，设计数据库，编写接口，测试接口，和小程序联调。</p><h2 id="技术点" tabindex="-1"><a class="header-anchor" href="#技术点" aria-hidden="true">#</a> 技术点</h2><ul><li>直接在 <code>Debug</code> 模式中开发，方便调试</li><li>构建完整的框架，大大提高业务效率</li><li><code>require-directory</code>工具：自动加载全部路由，提高注册效率</li><li>校验 API 参数工具</li><li>全局异常处理，统一错误信息</li><li>使用面向对象的方式编写异常返回</li><li><code>Sequelize</code> 使用类的方式来写，在 <code>models</code> 中操作数据库，但不要定义 <code>constructor</code>，否则会出错，操作数据库时会有很多奇怪的问题</li><li><code>bcrypt</code> 密码加密</li><li><code>jsonwebtoken</code> 用户登录生成 <code>token</code></li><li>框架会自动序列化数据 <code>dataValues</code> 并返回</li><li>数据库事务</li><li>数据缓存，前端缓存，服务器缓存 <code>redis</code></li><li>避免循环查询数据库</li><li>小心 <code>models</code> 中的模块循环导入</li><li>将返回的 <code>JSON</code> 数据序列化，只返回需要的字段传给前端</li><li><code>token</code> 在小程序中过期后，无感知刷新 <code>token</code></li><li>双令牌保证无感知登录</li><li>处理静态资源的访问</li><li>服务端部署</li><li>CMS 架构思想</li></ul><h3 id="工具包" tabindex="-1"><a class="header-anchor" href="#工具包" aria-hidden="true">#</a> 工具包</h3><ul><li><code>require-directory</code>: 自动加载</li><li><code>lodash</code>: 基础工具包</li><li><code>bcrypt</code>: 加密</li><li><code>validator.js</code>: 验证参数</li><li><code>jsonwebtoken</code>: 生成 token</li><li><code>basic-auth</code>: 解析 token</li><li><code>util.format</code>: node.js 自带的工具方法</li><li><code>axios</code>: 发送请求的工具</li></ul><h3 id="面向对象的服务端思维" tabindex="-1"><a class="header-anchor" href="#面向对象的服务端思维" aria-hidden="true">#</a> 面向对象的服务端思维</h3><ul><li>多个版本的接口兼容</li><li>开闭原则，修改关闭，扩展开发。最好是扩展新的功能，而不是修改原有的功能。</li></ul><p>业务分层：</p><ul><li><p>业务逻辑写在 Model 层，MVC 中的 M</p><ul><li>在 Model 中还可以再分出 Service 层</li></ul></li><li><p>在 Sequelize 模型中操作数据库</p></li></ul><h3 id="知识点串讲" tabindex="-1"><a class="header-anchor" href="#知识点串讲" aria-hidden="true">#</a> 知识点串讲</h3><p>基础框架要做好，要有一个得心应手的好框架。</p><p>通过邮箱密码显示注册，是为了获得唯一标识，然后再去登录。 在小程序中，微信已经帮我们做了显示注册这一步，生成了唯一标识符 openid，我们可以直接使用。</p><p>不建议使用 openid 用做用户的 uid，一个原因是比较长，二个原因是会泄露用户信息。</p><p>前端做缓存可以有效提高服务器性能。</p><p>数值参数传输，使用<code>body</code>传递服务器可以拿到<code>Number</code>类型，使用<code>path</code>传递拿到的是<code>String</code>类型。</p><p>代码中如果只有两处的逻辑相同，没必要提取成函数封装，就直接写两处，应该结合整体的逻辑考虑，如果有三处及以上相同的逻辑可以考虑封装成一个函数。</p><h3 id="中间层" tabindex="-1"><a class="header-anchor" href="#中间层" aria-hidden="true">#</a> 中间层</h3><ul><li>双层结构：前端 + 服务端</li><li>三层结构：前端 + 后端 + 服务端</li><li>前端自己编写 API</li></ul><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/node/case3-old-island-1.png" alt="image"></p><h3 id="获取-api-参数" tabindex="-1"><a class="header-anchor" href="#获取-api-参数" aria-hidden="true">#</a> 获取 api 参数</h3><p>共有四种形式：</p><ul><li>path: ctx.params</li><li>query = ctx.request.query</li><li>body = ctx.request.body</li><li>headers = ctx.request.header</li></ul><p>获取 body 参数需要使用<code>koa-bodyparser</code>中间件。</p><h3 id="校验-api-参数" tabindex="-1"><a class="header-anchor" href="#校验-api-参数" aria-hidden="true">#</a> 校验 api 参数</h3>',24),u=(0,p.Wm)("li",null,[(0,p.Uk)("使用"),(0,p.Wm)("code",null,"LinValidator"),(0,p.Uk)("工具")],-1),i=(0,p.Wm)("li",null,"编写验证器",-1),r=(0,p.Uk)("通用验证工具: "),k={href:"https://github.com/validatorjs/validator.js",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("validator.js"),b=(0,p.uE)('<p>在验证器里面，调用数据库查询邮箱是否重复，提前过滤，throw 错误。</p><h4 id="中间件只在应用程序启动时初始化一次" tabindex="-1"><a class="header-anchor" href="#中间件只在应用程序启动时初始化一次" aria-hidden="true">#</a> 中间件只在应用程序启动时初始化一次</h4><p>如果用<code>中间件</code>的形式编写，全局只会执行一次，只有一个实例化<code>new</code>，多个请求下属性会冲突会有问题。最好的方式是每个请求都需要一个实例化<code>new</code>。</p><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><p><strong>函数异常处理：</strong></p><p>在函数内判断异常，需要抛出异常<code>throw new Error()</code>，符合编程规范，也为了更好的解决问题。</p><p>在调用第三方库的时候，一定要加入<code>try-catch</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>全局异常处理：</strong></p><p>编写一个中间件，注册到路由中，监听错误，输出一段有意义的提示信息。</p><p>添加了全局异常处理之后，就不需要在每个函数中都加<code>try-catch</code>，只需要抛出<code>throw new Error()</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">catchError</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>\n      msg<span class="token operator">:</span> error<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>\n      error_code<span class="token operator">:</span> error<span class="token punctuation">.</span>errorCode<span class="token punctuation">,</span>\n      request<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> error<span class="token punctuation">.</span>code<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="sequelize-操作数据库" tabindex="-1"><a class="header-anchor" href="#sequelize-操作数据库" aria-hidden="true">#</a> Sequelize 操作数据库</h3><ul><li>需要捕获 Sequelize 的异常。</li></ul><h4 id="使用init定义模型-直接在模型中操作数据库" tabindex="-1"><a class="header-anchor" href="#使用init定义模型-直接在模型中操作数据库" aria-hidden="true">#</a> 使用<code>init</code>定义模型，直接在模型中操作数据库</h4><p>绝对不要在自定义模型中添加构造函数<code>constructor</code>，Sequelize 在操作数据库的时候会有奇怪的错误，可以直接使用静态方法，传入指定参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize<span class="token punctuation">,</span> Model <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;sequelize&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 定义用户模型，可以在里面添加静态方法操作数据库</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 查询是否存在 opendid 的小程序用户</span>\n  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getUserByOpenid</span><span class="token punctuation">(</span><span class="token parameter">openid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 查询用户</span>\n    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      where<span class="token operator">:</span> <span class="token punctuation">{</span>\n        openid<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 初始用户模型</span>\nUser<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span>\n      primaryKey<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      autoIncrement<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    nickname<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n    openid<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      unique<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    sequelize<span class="token punctuation">,</span>\n    tableName<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// await User.getUserByOpenid(&#39;&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="用户登录-token" tabindex="-1"><a class="header-anchor" href="#用户登录-token" aria-hidden="true">#</a> 用户登录 token</h3><p>生成 token 令牌，使用<code>jwt</code>，不用<code>session</code>。将 uid 放入 jwt 中作为 token。不要把 uid 直接传给前端，容易泄露，非常危险，应该放入 token 中一起传输，再从中解析出来使用。</p><p>写一个接口，用来颁布令牌。这在 web 开发中非常通用。</p><p>API 权限，请求需要携带 token 放在 header 中。</p><p>使用<code>basic-auth</code>方式，小程序传输的时候需要用 base64 工具包加密 token。</p><p>区分登录类型：</p><ul><li>邮箱密码登录</li><li>小程序登录</li><li>手机号登录</li></ul><h4 id="js-模拟枚举-区分类型" tabindex="-1"><a class="header-anchor" href="#js-模拟枚举-区分类型" aria-hidden="true">#</a> JS 模拟枚举，区分类型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isThisType</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> LoginType <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">USER_MINI_PROGRAM</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  <span class="token constant">USER_EMAIL</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>\n  <span class="token constant">USER_MOBILE</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span>\n  <span class="token constant">ADMIN_EMAIL</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  isThisType<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nLoginType<span class="token punctuation">.</span><span class="token function">isThisType</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="生成-token-令牌" tabindex="-1"><a class="header-anchor" href="#生成-token-令牌" aria-hidden="true">#</a> 生成 token 令牌</h4><ul><li>安装<code>jsonwebtoken</code></li><li>配置<code>secretKey</code>：密钥</li><li>配置<code>expiresIn</code>：过期时间</li></ul><p>token 中包含：uid、scope</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 颁发令牌</span>\n<span class="token keyword">const</span> <span class="token function-variable function">generateToken</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">uid<span class="token punctuation">,</span> scope</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      uid<span class="token punctuation">,</span>\n      scope<span class="token punctuation">,</span> <span class="token comment">// 权限</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    secretKey<span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      expiresIn<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> token<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="api-权限" tabindex="-1"><a class="header-anchor" href="#api-权限" aria-hidden="true">#</a> API 权限</h4><p>给接口添加权限，请求需要携带 token。</p><p>编写一个中间件来管理。</p><p>使用<code>basic-auth</code>工具解析前端传过来的 token: <code>Authorization: Basic base64(account:password)</code></p><h4 id="校验-token-令牌" tabindex="-1"><a class="header-anchor" href="#校验-token-令牌" aria-hidden="true">#</a> 校验 token 令牌</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> decode <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>tokenToken<span class="token punctuation">.</span>name<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// decode 里面有自定义数据，uid、scope，可以存储到全局使用</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// token 不合法 过期</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">global<span class="token punctuation">.</span>errs<span class="token punctuation">.</span>Forbidden</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="权限问题" tabindex="-1"><a class="header-anchor" href="#权限问题" aria-hidden="true">#</a> 权限问题</h3><p>这是最难也是最复杂的问题。</p><p>给不同的角色用不同的数字来表示。设计成，权限越低使用的数字越小，权限越高使用的数字越大，比如：</p><ul><li>普通用户：8</li><li>管理员：16</li><li>超级管理员：32</li></ul><p>这样设计的好处是只要做一个数字大小的判断，就能确定对方是否有权限访问当前接口。 比如：当前接口需要的最低权限是<code>10</code>，普通用户就不能访问，管理员以上都能访问。</p><h2 id="微信小程序登录" tabindex="-1"><a class="header-anchor" href="#微信小程序登录" aria-hidden="true">#</a> 微信小程序登录</h2><p>流程：</p><ol><li>小程序端用户点击按钮授权，拿到 code，传给服务端。</li><li>服务器接受到 code 之后，去微信服务器获取 openid，写入到用户表中，用表中的 uid 生成 token，返回给小程序端。</li><li>小程序端拿到 token 之后，保存到本地，给以后的每个接口请求都携带上 token。</li><li>服务端接受到请求之后，验证 token 是否合法，是否有权限访问，再返回相应的结果。</li></ol><p><strong>服务端：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">codeToToken</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 格式化字符串</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>\n    global<span class="token punctuation">.</span>config<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>loginUrl<span class="token punctuation">,</span>\n    global<span class="token punctuation">.</span>config<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>appId<span class="token punctuation">,</span>\n    global<span class="token punctuation">.</span>config<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>appSecret<span class="token punctuation">,</span>\n    code\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">global<span class="token punctuation">.</span>errs<span class="token punctuation">.</span>AuthFailed</span><span class="token punctuation">(</span><span class="token string">&#39;openid获取失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> errCode <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>errcode<span class="token punctuation">;</span> <span class="token comment">// 0：请求成功，其它数字都是失败</span>\n  <span class="token keyword">const</span> errMsg <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>errmsg<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>errCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">global<span class="token punctuation">.</span>errs<span class="token punctuation">.</span>AuthFailed</span><span class="token punctuation">(</span><span class="token string">&#39;openid获取失败: &#39;</span> <span class="token operator">+</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 建立档案 user uid</span>\n\n  <span class="token comment">// 判断数据库是否存在微信用户 opendid</span>\n  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">getUserByOpenid</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 如果不存在，就创建一个微信小程序用户</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">createUserByOpenid</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">,</span> Auth<span class="token punctuation">.</span><span class="token constant">AUSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><strong>小程序端：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000/v1/token&#39;</span><span class="token punctuation">,</span>\n        method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n        data<span class="token operator">:</span> <span class="token punctuation">{</span>\n          account<span class="token operator">:</span> res<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n          type<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> code <span class="token operator">=</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="无感知刷新-token" tabindex="-1"><a class="header-anchor" href="#无感知刷新-token" aria-hidden="true">#</a> 无感知刷新 token</h3><p><img src="http://www.lcong.cn/assets/images/knowledge/computers/node/case3-old-island-2.png" alt="image"></p><p>小程序每次启动会生成一个 token，如果 2 小时过期，用户在小程序中停留了 2 小时，token 过期之后，需要无感知自动重新刷新 token。</p><p>使用二次重发机制。</p><p>在小程序端处理，判断<code>code</code>，如果是<code>403</code>就重新去生成 token，再重新去掉一下用户上一次的接口。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> url<span class="token punctuation">,</span>\n  method<span class="token operator">:</span> method<span class="token punctuation">,</span>\n  data<span class="token operator">:</span> data<span class="token punctuation">,</span>\n  header<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>\n    Authorization<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token string">&#39;403&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      token<span class="token punctuation">.</span><span class="token function">getTokenFromServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_request</span><span class="token punctuation">(</span><span class="token operator">...</span>param<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="双令牌保证无感知登录" tabindex="-1"><a class="header-anchor" href="#双令牌保证无感知登录" aria-hidden="true">#</a> 双令牌保证无感知登录</h3><p>适用于需要用户名和密码登录去获取令牌。</p><p>小程序不需要输入账号密码，处理起来可以比较容易，但是网站和 APP 需要，有两种方案：</p><ol><li>缓存用户的账号和密码在本地，下次获取令牌的时候，携带上去。这种做法不太好。</li><li>双令牌方式是最主流的方式。有<code>access_token</code>和<code>refresh_token</code>，使用<code>refresh_token</code>去获取最新的令牌。假如<code>access_token</code>过期时间是 2 小时，<code>refresh_token</code>过期时间是 1 个月，每次获取到最新的<code>access_token</code>，都再次重置<code>refresh_token</code>的过期时间为 1 个月。这样可以保证用户一个月内访问过 APP，就不需要再输入账号和密码。如果 1 个月没有访问<code>refresh_token</code>过期，那就要求用户输入账号和密码。</li></ol><h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计" aria-hidden="true">#</a> 数据库设计</h2><p>code first，先设计 model，然后再使用 Sequelize 创建出表。</p><p>思路先粗后细，先找大的主题，再从中找到小的主题。设计出实体表，再抽象出业务表。</p><p>实体表和业务表：</p><ul><li>实体表记录主体本身相关的信息</li><li>业务表是抽象的，将实体表抽象，为解决业务问题而设计</li></ul><p>表之间一定要有关联，可以用外键关联，也可以使用其它方式关联，比如抽象出来的业务表和实体表的对应关系。</p><h2 id="业务开发" tabindex="-1"><a class="header-anchor" href="#业务开发" aria-hidden="true">#</a> 业务开发</h2><h4 id="取最新期刊" tabindex="-1"><a class="header-anchor" href="#取最新期刊" aria-hidden="true">#</a> 取最新期刊</h4><p>先将排序，再取数据。且在 dataValues 中追加数据，框架会自动序列化数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ...5,4,3,2,1，降序，取第一条</span>\n<span class="token keyword">const</span> flow <span class="token operator">=</span> <span class="token keyword">await</span> Flow<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  order<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DESC&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在dataValues中追加数据</span>\nflow<span class="token punctuation">.</span><span class="token function">setDataValue</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nctx<span class="token punctuation">.</span>body <span class="token operator">=</span> flow<span class="token punctuation">;</span> <span class="token comment">// KOA框架会自动序列化数据，返回dataValues</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="数据库事务" tabindex="-1"><a class="header-anchor" href="#数据库事务" aria-hidden="true">#</a> 数据库事务</h3><p>保证数据的一致性。</p><p>关系型数据库 ACID:</p><ul><li>A: 原子性</li><li>C：一致性</li><li>I：隔离性</li><li>D：持久性</li></ul><p>使用事务机制，在<code>Favor</code>表中创建一条记录，并在<code>Art</code>表中同步更新<code>fav_nums</code>字段：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 一定要return</span>\n<span class="token keyword">return</span> sequelize<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> Favor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      art_id<span class="token punctuation">,</span>\n      type<span class="token punctuation">,</span>\n      uid<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      transaction<span class="token operator">:</span> t<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> art <span class="token operator">=</span> <span class="token keyword">await</span> Art<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>art_id<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> art<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">&#39;fav_nums&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    by<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 累加 1</span>\n    transaction<span class="token operator">:</span> t<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>事务机制的做法是，将里面所有对表的操作视为一个整体执行，需要全部成功才行，否则会失败。</p><h3 id="软删除" tabindex="-1"><a class="header-anchor" href="#软删除" aria-hidden="true">#</a> 软删除</h3><ul><li><code>force: false</code>软删除</li></ul><p><code>Favor</code>和<code>favor</code>的区别：<code>Favor</code>是一个类，还没有被实例化。<code>favor</code>是从表里查询出来的一个记录。</p><p>查询出这条记录后，直接使用<code>favor.destroy</code>，将自身删除掉。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">disLike</span><span class="token punctuation">(</span><span class="token parameter">art_id<span class="token punctuation">,</span> type<span class="token punctuation">,</span> uid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> favor <span class="token operator">=</span> <span class="token keyword">await</span> Favor<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    where<span class="token operator">:</span> <span class="token punctuation">{</span>\n      art_id<span class="token punctuation">,</span>\n      type<span class="token punctuation">,</span>\n      uid<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>favor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">global<span class="token punctuation">.</span>errs<span class="token punctuation">.</span>DislikeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Favor 表 favor 记录</span>\n  <span class="token keyword">return</span> sequelize<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用已经查询出来的`favor`，直接删除掉自身</span>\n    <span class="token keyword">await</span> favor<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      force<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      transaction<span class="token operator">:</span> t<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> art <span class="token operator">=</span> <span class="token keyword">await</span> Art<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>art_id<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> art<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token string">&#39;fav_nums&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      by<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      transaction<span class="token operator">:</span> t<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="sequelize-op-语句" tabindex="-1"><a class="header-anchor" href="#sequelize-op-语句" aria-hidden="true">#</a> sequelize[Op.*]语句</h3><p><strong>Op.not：type 不等于 400</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arts <span class="token operator">=</span> <span class="token keyword">await</span> Favor<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span>Op<span class="token punctuation">.</span>not<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="避免循环查询数据库" tabindex="-1"><a class="header-anchor" href="#避免循环查询数据库" aria-hidden="true">#</a> 避免循环查询数据库</h3><p>如果要查询特定的一组数据，不建议使用 for 循环单条查询，因为循环查询次数不可控，这样的行为很危险。可以使用<code>Op.in</code>查询来解决，传入一组条件，查询出一组数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 只查询这几条数据</span>\n<span class="token keyword">const</span> finder <span class="token operator">=</span> <span class="token punctuation">{</span>\n  where<span class="token operator">:</span> <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span>Op<span class="token punctuation">.</span>in<span class="token punctuation">]</span><span class="token operator">:</span> ids<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> movies <span class="token operator">=</span> <span class="token keyword">await</span> Movie<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>finder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="小心模块循环导入" tabindex="-1"><a class="header-anchor" href="#小心模块循环导入" aria-hidden="true">#</a> 小心模块循环导入</h3><p>模块<code>a</code>导入模块<code>b</code>，<code>模块b</code>导入模块<code>a</code>，这样做会有一个模块为空而报错。</p><p>解决方案是在代码的函数中导入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token parameter">uid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> Favor <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./favor&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在局部导入，而不是在文件头部导入</span>\n  <span class="token keyword">const</span> like <span class="token operator">=</span> <span class="token keyword">await</span> Favor<span class="token punctuation">.</span><span class="token function">userLikeIt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>art_id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> like<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="util-format-格式化字符串" tabindex="-1"><a class="header-anchor" href="#util-format-格式化字符串" aria-hidden="true">#</a> util.format 格式化字符串</h3><p>将指定字符替换成传入的参数，会将<code>%s</code>替换成传入的参数，生成新的字符串</p><ul><li><code>%s</code>: 字符串</li><li><code>%d</code>: 数值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>\n  <span class="token string">&#39;http://t.yushu.im/v2/book/search?q=%s&amp;count=%s&amp;start=%s&amp;summary=%s&#39;</span><span class="token punctuation">;</span>\nutil<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;韩寒&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;概要&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 返回：http://t.yushu.im/v2/book/search?q=韩寒&amp;count=10&amp;start=20&amp;summary=概要</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="将返回的-json-数据序列化" tabindex="-1"><a class="header-anchor" href="#将返回的-json-数据序列化" aria-hidden="true">#</a> 将返回的 JSON 数据序列化</h3><p>方法一：直接重写模型的<code>toJSON</code>方法，只返回自己需要的数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>\n  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 或者直接使用 this.defaultValue</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      content<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataValue</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      nums<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataValue</span><span class="token punctuation">(</span><span class="token string">&#39;nums&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nComment<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    content<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    nums<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span>\n    book_id<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    sequelize<span class="token punctuation">,</span>\n    tableName<span class="token operator">:</span> <span class="token string">&#39;comment&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>方法二：直接将<code>toJSON</code>方法，添加到<code>Model</code>中，对所有模型生效，过滤掉不需要返回给前端的字段</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> unset<span class="token punctuation">,</span> clone<span class="token punctuation">,</span> isArray <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 当数据返回给前端，模型序列化的时候才会执行</span>\n<span class="token class-name">Model</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// let data = this.dataValues</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataValues<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">unset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;updated_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">unset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">unset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;deleted_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// this.exclude 指定需要过滤的字段</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exclude<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">unset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="this-exclude-的用法" tabindex="-1"><a class="header-anchor" href="#this-exclude-的用法" aria-hidden="true">#</a> this.exclude 的用法</h4><p>使用一：在接口返回的时候过滤掉指定字段，这样比较灵活</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:index/next&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> art <span class="token operator">=</span> <span class="token keyword">await</span> Art<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>art_id<span class="token punctuation">,</span> flow<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  art<span class="token punctuation">.</span><span class="token function">setDataValue</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> flow<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  art<span class="token punctuation">.</span>exclude <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;like_status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> art<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用二：在指定的模型中排除指定字段，会作用于整个模型，一次解决，但是不太灵活，将模型写死了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Comment</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>exclude <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;book_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="处理静态资源的访问" tabindex="-1"><a class="header-anchor" href="#处理静态资源的访问" aria-hidden="true">#</a> 处理静态资源的访问</h3><p>静态资源非常消耗流量，不应该放到项目代码中，应该放到专门的资源服务器中，最好是放到阿里云的 OSS 云服务。</p><p>方案：</p><ol><li>网站目录</li><li>搭建自己的静态服务器</li><li>云服务，阿里云 OSS，有 CDN</li><li>github gitpage</li></ol><p>将 js、css、img 全部放到 CDN 中，加载速度是最快的。</p><h2 id="服务端部署" tabindex="-1"><a class="header-anchor" href="#服务端部署" aria-hidden="true">#</a> 服务端部署</h2><p>部署是非常依赖环境的事情，在没有<code>Docker</code>之前，总是会遇到很多问题。遇到问题之后需要不断的尝试。</p><p>部署流程：</p><ol><li>购买云服务器，或者是一台虚拟机，获得外网 IP。购买域名，备案，解析到 IP。</li><li>在服务器上安装相关软件，比如：nginx，mysql，node。启动 node 之后，可以通过 ip 加端口访问，但是通常不会直接使用端口号去访问某个程序，而是使用<code>nginx</code>做代理。</li><li>配置<code>nginx</code>反向代理，使用默认的<code>80</code>端口，所有的访问先进入<code>nginx</code>再做转发。</li></ol><p>使用免费的 https 证书：<code>encrypt</code>，<code>nginx</code>还需要监听<code>443</code>端口。</p><h3 id="常规进程与守护进程" tabindex="-1"><a class="header-anchor" href="#常规进程与守护进程" aria-hidden="true">#</a> 常规进程与守护进程</h3><p>用命令窗口直接启动，关闭窗口就会停止的进程叫做常规进程，窗口会阻塞。</p><p>在后台启动，比如用<code>pm2</code>，就是守护进程，窗口不会阻塞。</p><p>启动<code>node</code>最好是用<code>pm2</code>，开启守护进程，而且还有日志监控功能。</p><h2 id="cms-架构思想" tabindex="-1"><a class="header-anchor" href="#cms-架构思想" aria-hidden="true">#</a> CMS 架构思想</h2><p>CMS 是系统中必备的一大部分，需要用来录入数据，操作数据，查看数据。</p><p>直接去操作数据库去改数据是非常危险的，当涉及多个表时，非常容易发生错乱。</p><p><strong>中小型两套 API 系统：</strong></p><ol><li>To-C：针对用户</li><li>To-B：针对 CMS</li></ol><p>小型公司简单化可以只用一套 API 系统，以<code>CMS API</code>为主。复杂的场景做两套 API 系统。数据库统一使用一个。</p><p><strong>大型平台三套 API 系统：</strong><img src="http://www.lcong.cn/assets/images/knowledge/computers/node/case3-old-island-3.png" alt="image"></p>',125),m={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,e,(0,p.Wm)("p",null,[(0,p.Wm)("a",o,[c,(0,p.Wm)(a)])]),l,(0,p.Wm)("ul",null,[u,i,(0,p.Wm)("li",null,[r,(0,p.Wm)("a",k,[d,(0,p.Wm)(a)])])]),b],64)}}}}]);